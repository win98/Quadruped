#ifndef cmd_def_h
#define cmd_def_h

/*****************************************************************************
 *
 *
 *  !!!!!!!!  THIS IS AUTOGENERATED FILE, DO NOT EDIT !!!!!!!!
 *
 *
 ****************************************************************************/
                    
#include <stdarg.h>
/*****************************************************************************
 *
 *      Support for compilers other than GCC and MSVC:
 *      
 *      To support specific compiler add compiler's structure packing directives to following macro:
 *          PACKSTRUCT( decl )
 *          
 *      BGLIB uses PACKSTRUCT macro to add packing information for structures:
 *      PACKSTRUCT(struct wifi_msg_dfu_reset_cmd_t
 *      {
 *          uint8	dfu;
 *      });
 *
 *
 ****************************************************************************/

#include "apitypes.h"
#ifdef __cplusplus
extern "C" {
#endif

/* Compability */
#ifndef PACKSTRUCT
#ifdef PACKED
#define PACKSTRUCT(a) a PACKED 
#else
/*Default packed configuration*/
#ifdef __GNUC__
#ifdef _WIN32
#define PACKSTRUCT( decl ) decl __attribute__((__packed__,gcc_struct))
#else
#define PACKSTRUCT( decl ) decl __attribute__((__packed__))
#endif
#define ALIGNED __attribute__((aligned(0x4)))

#else //msvc

#define PACKSTRUCT( decl ) __pragma( pack(push, 1) ) decl __pragma( pack(pop) )
#define ALIGNED

#endif
#endif
#endif
struct wifi_cmd_packet;
typedef void (*wifi_cmd_handler)(const void*);
struct wifi_header
{
    uint8  type_hilen;
    uint8  lolen;
    uint8  cls;
    uint8  command;
};


struct wifi_msg
{
    struct wifi_header    hdr;
    uint32               params;
wifi_cmd_handler       handler;
};       

const struct wifi_msg * wifi_find_msg_hdr(struct wifi_header hdr);
const struct wifi_msg * wifi_get_msg(uint8 idx) ;
const struct wifi_msg * wifi_get_msg_hdr(struct wifi_header hdr) ;
extern void (*bglib_output)(uint8 len1,uint8* data1,uint16 len2,uint8* data2);
void wifi_send_message(uint8 msgid,...);

enum system_main_state
{
	system_idle       = 1,
	system_powered    = 2,
	system_connecting = 4,
	system_connected  = 8,
	system_wps        = 16,
	system_main_state_max= 17
};

enum endpoint_types
{
	endpoint_free       = 0x0,
	endpoint_uart       = 0x1,
	endpoint_usb        = 0x2,
	endpoint_tcp        = 0x4,
	endpoint_tcp_server = 0x8,
	endpoint_udp        = 0x10,
	endpoint_udp_server = 0x20,
	endpoint_script     = 0x40,
	endpoint_wait_close = 0x80,
	endpoint_spi        = 0x100,
	endpoint_i2c        = 0x200,
	endpoint_drop       = 0x400,
	endpoint_types_max  = 1025
};

enum hardware_alarm_repeat_mask
{
	hardware_alarm_every_half_second = 0,
	hardware_alarm_every_second      = 1,
	hardware_alarm_every_ten_seconds = 2,
	hardware_alarm_every_minute      = 3,
	hardware_alarm_every_ten_minutes = 4,
	hardware_alarm_every_hour        = 5,
	hardware_alarm_every_day         = 6,
	hardware_alarm_every_week        = 7,
	hardware_alarm_every_month       = 8,
	hardware_alarm_every_year        = 9,
	hardware_alarm_repeat_mask_max   = 10
};

#define FLASH_PS_KEY_MAC                 1
#define FLASH_PS_KEY_IPV4_SETTINGS       2
#define FLASH_PS_KEY_DNS0_SETTINGS       3
#define FLASH_PS_KEY_DNS1_SETTINGS       4
#define FLASH_PS_KEY_MODULE_SERVICE      5
#define FLASH_PS_KEY_APPL_NUM1           10
#define FLASH_PS_KEY_APPL_NUM2           11
#define FLASH_PS_KEY_APPL_NUM3           12
#define FLASH_PS_KEY_APPL_NUM4           13
#define FLASH_PS_KEY_APPL_STR1           14
#define FLASH_PS_KEY_APPL_STR2           15
#define FLASH_PS_KEY_APPL_STR3           16
#define FLASH_PS_KEY_APPL_STR4           17
#define FLASH_PS_KEY_APPL_TITLE          18
#define FLASH_PS_KEY_AP_SSID             20
#define FLASH_PS_KEY_AP_CHANNEL          21
#define FLASH_PS_KEY_AP_PW               22
#define FLASH_PS_KEY_AP_WIFI_N           23
#define FLASH_PS_KEY_AP_SECURITY         24
#define FLASH_PS_KEY_CLIENT_SSID         25
#define FLASH_PS_KEY_CLIENT_PW           26
#define FLASH_PS_KEY_HTTP_PW             27
#define FLASH_PS_KEY_HTTP_LOGIN_LEVEL    28
#define FLASH_PS_KEY_DHCPS_ENABLE        30
#define FLASH_PS_KEY_DHCPS_SPACE         31
#define FLASH_PS_KEY_DNSS_ENABLE         35
#define FLASH_PS_KEY_DNSS_URL            36
#define FLASH_PS_KEY_DNSS_ANY_URL        37
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_1  40
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_2  41
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_3  42
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_4  43
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_5  44
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_6  45
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_7  46
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_8  47
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_9  48
#define FLASH_PS_KEY_AP_SCANLIST_ITEM_10 49
#define FLASH_PS_KEY_AP_LABEL1           50
#define FLASH_PS_KEY_AP_LABEL2           51
#define FLASH_PS_KEY_AP_LABEL3           52
#define FLASH_PS_KEY_AP_LABEL4           53
#define FLASH_PS_KEY_AP_LABEL5           54
#define FLASH_PS_KEY_AP_LABEL6           55
#define FLASH_PS_KEY_AP_LABEL7           56
#define FLASH_PS_KEY_AP_LABEL8           57
#define FLASH_PS_KEY_AP_LABEL9           58
#define FLASH_PS_KEY_AP_LABEL10          59


enum wifi_parameter_types
{
    wifi_msg_parameter_uint8=2,
    wifi_msg_parameter_int8=3,
    wifi_msg_parameter_uint16=4,
    wifi_msg_parameter_int16=5,
    wifi_msg_parameter_uint32=6,
    wifi_msg_parameter_int32=7,
    wifi_msg_parameter_uint8array=8,
    wifi_msg_parameter_string=9,
    wifi_msg_parameter_hwaddr=10,
    wifi_msg_parameter_uint16array=11
};

enum wifi_msg_types
{
    wifi_msg_type_cmd=0x00,
    wifi_msg_type_rsp=0x00,
    wifi_msg_type_evt=0x80
};
enum wifi_dev_types
{
    wifi_dev_type_ble    =0x00,
    wifi_dev_type_wifi   =0x08,
    wifi_dev_type_iwrap  =0x10,
    wifi_dev_type_dumo   =0x20
};

enum wifi_classes
{
	wifi_cls_dfu,
	wifi_cls_system,
	wifi_cls_config,
	wifi_cls_sme,
	wifi_cls_tcpip,
	wifi_cls_endpoint,
	wifi_cls_hardware,
	wifi_cls_flash,
	wifi_cls_i2c,
	wifi_cls_https,
	wifi_cls_ethernet,
	wifi_cls_last
};
enum wifi_command_ids
{
	wifi_cmd_dfu_reset_id=0,
	wifi_cmd_dfu_flash_set_address_id=1,
	wifi_cmd_dfu_flash_upload_id=2,
	wifi_cmd_dfu_flash_upload_finish_id=3,
	wifi_cmd_system_sync_id=0,
	wifi_cmd_system_reset_id=1,
	wifi_cmd_system_hello_id=2,
	wifi_cmd_system_set_max_power_saving_state_id=3,
	wifi_cmd_config_get_mac_id=0,
	wifi_cmd_config_set_mac_id=1,
	wifi_cmd_sme_wifi_on_id=0,
	wifi_cmd_sme_wifi_off_id=1,
	wifi_cmd_sme_power_on_id=2,
	wifi_cmd_sme_start_scan_id=3,
	wifi_cmd_sme_stop_scan_id=4,
	wifi_cmd_sme_set_password_id=5,
	wifi_cmd_sme_connect_bssid_id=6,
	wifi_cmd_sme_connect_ssid_id=7,
	wifi_cmd_sme_disconnect_id=8,
	wifi_cmd_sme_set_scan_channels_id=9,
	wifi_cmd_sme_set_operating_mode_id=10,
	wifi_cmd_sme_start_ap_mode_id=11,
	wifi_cmd_sme_stop_ap_mode_id=12,
	wifi_cmd_sme_scan_results_sort_rssi_id=13,
	wifi_cmd_sme_ap_client_disconnect_id=14,
	wifi_cmd_sme_set_ap_password_id=15,
	wifi_cmd_sme_set_ap_max_clients_id=16,
	wifi_cmd_sme_start_wps_id=17,
	wifi_cmd_sme_stop_wps_id=18,
	wifi_cmd_sme_get_signal_quality_id=19,
	wifi_cmd_tcpip_start_tcp_server_id=0,
	wifi_cmd_tcpip_tcp_connect_id=1,
	wifi_cmd_tcpip_start_udp_server_id=2,
	wifi_cmd_tcpip_udp_connect_id=3,
	wifi_cmd_tcpip_configure_id=4,
	wifi_cmd_tcpip_dns_configure_id=5,
	wifi_cmd_tcpip_dns_gethostbyname_id=6,
	wifi_cmd_tcpip_udp_bind_id=7,
	wifi_cmd_tcpip_dhcp_set_hostname_id=8,
	wifi_cmd_endpoint_send_id=0,
	wifi_cmd_endpoint_set_streaming_id=1,
	wifi_cmd_endpoint_set_active_id=2,
	wifi_cmd_endpoint_set_streaming_destination_id=3,
	wifi_cmd_endpoint_close_id=4,
	wifi_cmd_endpoint_set_transmit_size_id=5,
	wifi_cmd_endpoint_disable_id=6,
	wifi_cmd_hardware_set_soft_timer_id=0,
	wifi_cmd_hardware_external_interrupt_config_id=1,
	wifi_cmd_hardware_change_notification_config_id=2,
	wifi_cmd_hardware_change_notification_pullup_id=3,
	wifi_cmd_hardware_io_port_config_direction_id=4,
	wifi_cmd_hardware_io_port_config_open_drain_id=5,
	wifi_cmd_hardware_io_port_write_id=6,
	wifi_cmd_hardware_io_port_read_id=7,
	wifi_cmd_hardware_output_compare_id=8,
	wifi_cmd_hardware_adc_read_id=9,
	wifi_cmd_hardware_rtc_init_id=10,
	wifi_cmd_hardware_rtc_set_time_id=11,
	wifi_cmd_hardware_rtc_get_time_id=12,
	wifi_cmd_hardware_rtc_set_alarm_id=13,
	wifi_cmd_hardware_uart_conf_id=14,
	wifi_cmd_hardware_uart_conf_get_id=15,
	wifi_cmd_flash_ps_defrag_id=0,
	wifi_cmd_flash_ps_dump_id=1,
	wifi_cmd_flash_ps_erase_all_id=2,
	wifi_cmd_flash_ps_save_id=3,
	wifi_cmd_flash_ps_load_id=4,
	wifi_cmd_flash_ps_erase_id=5,
	wifi_cmd_i2c_start_read_id=0,
	wifi_cmd_i2c_start_write_id=1,
	wifi_cmd_i2c_stop_id=2,
	wifi_cmd_https_enable_id=0,
	wifi_cmd_ethernet_set_dataroute_id=0,
	wifi_cmd_ethernet_close_id=1,
	wifi_cmd_ethernet_connected_id=2
};
enum wifi_response_ids
{
	wifi_rsp_dfu_reset_id=0,
	wifi_rsp_dfu_flash_set_address_id=1,
	wifi_rsp_dfu_flash_upload_id=2,
	wifi_rsp_dfu_flash_upload_finish_id=3,
	wifi_rsp_system_sync_id=0,
	wifi_rsp_system_reset_id=1,
	wifi_rsp_system_hello_id=2,
	wifi_rsp_system_set_max_power_saving_state_id=3,
	wifi_rsp_config_get_mac_id=0,
	wifi_rsp_config_set_mac_id=1,
	wifi_rsp_sme_wifi_on_id=0,
	wifi_rsp_sme_wifi_off_id=1,
	wifi_rsp_sme_power_on_id=2,
	wifi_rsp_sme_start_scan_id=3,
	wifi_rsp_sme_stop_scan_id=4,
	wifi_rsp_sme_set_password_id=5,
	wifi_rsp_sme_connect_bssid_id=6,
	wifi_rsp_sme_connect_ssid_id=7,
	wifi_rsp_sme_disconnect_id=8,
	wifi_rsp_sme_set_scan_channels_id=9,
	wifi_rsp_sme_set_operating_mode_id=10,
	wifi_rsp_sme_start_ap_mode_id=11,
	wifi_rsp_sme_stop_ap_mode_id=12,
	wifi_rsp_sme_scan_results_sort_rssi_id=13,
	wifi_rsp_sme_ap_client_disconnect_id=14,
	wifi_rsp_sme_set_ap_password_id=15,
	wifi_rsp_sme_set_ap_max_clients_id=16,
	wifi_rsp_sme_start_wps_id=17,
	wifi_rsp_sme_stop_wps_id=18,
	wifi_rsp_sme_get_signal_quality_id=19,
	wifi_rsp_tcpip_start_tcp_server_id=0,
	wifi_rsp_tcpip_tcp_connect_id=1,
	wifi_rsp_tcpip_start_udp_server_id=2,
	wifi_rsp_tcpip_udp_connect_id=3,
	wifi_rsp_tcpip_configure_id=4,
	wifi_rsp_tcpip_dns_configure_id=5,
	wifi_rsp_tcpip_dns_gethostbyname_id=6,
	wifi_rsp_tcpip_udp_bind_id=7,
	wifi_rsp_tcpip_dhcp_set_hostname_id=8,
	wifi_rsp_endpoint_send_id=0,
	wifi_rsp_endpoint_set_streaming_id=1,
	wifi_rsp_endpoint_set_active_id=2,
	wifi_rsp_endpoint_set_streaming_destination_id=3,
	wifi_rsp_endpoint_close_id=4,
	wifi_rsp_endpoint_set_transmit_size_id=5,
	wifi_rsp_endpoint_disable_id=6,
	wifi_rsp_hardware_set_soft_timer_id=0,
	wifi_rsp_hardware_external_interrupt_config_id=1,
	wifi_rsp_hardware_change_notification_config_id=2,
	wifi_rsp_hardware_change_notification_pullup_id=3,
	wifi_rsp_hardware_io_port_config_direction_id=4,
	wifi_rsp_hardware_io_port_config_open_drain_id=5,
	wifi_rsp_hardware_io_port_write_id=6,
	wifi_rsp_hardware_io_port_read_id=7,
	wifi_rsp_hardware_output_compare_id=8,
	wifi_rsp_hardware_adc_read_id=9,
	wifi_rsp_hardware_rtc_init_id=10,
	wifi_rsp_hardware_rtc_set_time_id=11,
	wifi_rsp_hardware_rtc_get_time_id=12,
	wifi_rsp_hardware_rtc_set_alarm_id=13,
	wifi_rsp_hardware_uart_conf_id=14,
	wifi_rsp_hardware_uart_conf_get_id=15,
	wifi_rsp_flash_ps_defrag_id=0,
	wifi_rsp_flash_ps_dump_id=1,
	wifi_rsp_flash_ps_erase_all_id=2,
	wifi_rsp_flash_ps_save_id=3,
	wifi_rsp_flash_ps_load_id=4,
	wifi_rsp_flash_ps_erase_id=5,
	wifi_rsp_i2c_start_read_id=0,
	wifi_rsp_i2c_start_write_id=1,
	wifi_rsp_i2c_stop_id=2,
	wifi_rsp_https_enable_id=0,
	wifi_rsp_ethernet_set_dataroute_id=0,
	wifi_rsp_ethernet_close_id=1,
	wifi_rsp_ethernet_connected_id=2
};
enum wifi_event_ids
{
	wifi_evt_dfu_boot_id=0,
	wifi_evt_system_boot_id=0,
	wifi_evt_system_state_id=1,
	wifi_evt_system_sw_exception_id=2,
	wifi_evt_system_power_saving_state_id=3,
	wifi_evt_config_mac_address_id=0,
	wifi_evt_sme_wifi_is_on_id=0,
	wifi_evt_sme_wifi_is_off_id=1,
	wifi_evt_sme_scan_result_id=2,
	wifi_evt_sme_scan_result_drop_id=3,
	wifi_evt_sme_scanned_id=4,
	wifi_evt_sme_connected_id=5,
	wifi_evt_sme_disconnected_id=6,
	wifi_evt_sme_interface_status_id=7,
	wifi_evt_sme_connect_failed_id=8,
	wifi_evt_sme_connect_retry_id=9,
	wifi_evt_sme_ap_mode_started_id=10,
	wifi_evt_sme_ap_mode_stopped_id=11,
	wifi_evt_sme_ap_mode_failed_id=12,
	wifi_evt_sme_ap_client_joined_id=13,
	wifi_evt_sme_ap_client_left_id=14,
	wifi_evt_sme_scan_sort_result_id=15,
	wifi_evt_sme_scan_sort_finished_id=16,
	wifi_evt_sme_wps_stopped_id=17,
	wifi_evt_sme_wps_completed_id=18,
	wifi_evt_sme_wps_failed_id=19,
	wifi_evt_sme_wps_credential_ssid_id=20,
	wifi_evt_sme_wps_credential_password_id=21,
	wifi_evt_sme_signal_quality_id=22,
	wifi_evt_tcpip_configuration_id=0,
	wifi_evt_tcpip_dns_configuration_id=1,
	wifi_evt_tcpip_endpoint_status_id=2,
	wifi_evt_tcpip_dns_gethostbyname_result_id=3,
	wifi_evt_tcpip_udp_data_id=4,
	wifi_evt_endpoint_syntax_error_id=0,
	wifi_evt_endpoint_data_id=1,
	wifi_evt_endpoint_status_id=2,
	wifi_evt_endpoint_closing_id=3,
	wifi_evt_endpoint_error_id=4,
	wifi_evt_hardware_soft_timer_id=0,
	wifi_evt_hardware_change_notification_id=1,
	wifi_evt_hardware_external_interrupt_id=2,
	wifi_evt_hardware_rtc_alarm_id=3,
	wifi_evt_hardware_uart_conf_id=4,
	wifi_evt_flash_ps_key_id=0,
	wifi_evt_flash_ps_key_changed_id=1,
	wifi_evt_flash_low_voltage_id=2,
	wifi_evt_https_on_req_id=0,
	wifi_evt_https_button_id=1,
	wifi_evt_ethernet_link_status_id=0
};
enum wifi_msg_idx
{
	wifi_cmd_dfu_reset_idx =0,
	wifi_cmd_dfu_flash_set_address_idx =1,
	wifi_cmd_dfu_flash_upload_idx =2,
	wifi_cmd_dfu_flash_upload_finish_idx =3,
	wifi_cmd_system_sync_idx =4,
	wifi_cmd_system_reset_idx =5,
	wifi_cmd_system_hello_idx =6,
	wifi_cmd_system_set_max_power_saving_state_idx =7,
	wifi_cmd_config_get_mac_idx =8,
	wifi_cmd_config_set_mac_idx =9,
	wifi_cmd_sme_wifi_on_idx =10,
	wifi_cmd_sme_wifi_off_idx =11,
	wifi_cmd_sme_power_on_idx =12,
	wifi_cmd_sme_start_scan_idx =13,
	wifi_cmd_sme_stop_scan_idx =14,
	wifi_cmd_sme_set_password_idx =15,
	wifi_cmd_sme_connect_bssid_idx =16,
	wifi_cmd_sme_connect_ssid_idx =17,
	wifi_cmd_sme_disconnect_idx =18,
	wifi_cmd_sme_set_scan_channels_idx =19,
	wifi_cmd_sme_set_operating_mode_idx =20,
	wifi_cmd_sme_start_ap_mode_idx =21,
	wifi_cmd_sme_stop_ap_mode_idx =22,
	wifi_cmd_sme_scan_results_sort_rssi_idx =23,
	wifi_cmd_sme_ap_client_disconnect_idx =24,
	wifi_cmd_sme_set_ap_password_idx =25,
	wifi_cmd_sme_set_ap_max_clients_idx =26,
	wifi_cmd_sme_start_wps_idx =27,
	wifi_cmd_sme_stop_wps_idx =28,
	wifi_cmd_sme_get_signal_quality_idx =29,
	wifi_cmd_tcpip_start_tcp_server_idx =30,
	wifi_cmd_tcpip_tcp_connect_idx =31,
	wifi_cmd_tcpip_start_udp_server_idx =32,
	wifi_cmd_tcpip_udp_connect_idx =33,
	wifi_cmd_tcpip_configure_idx =34,
	wifi_cmd_tcpip_dns_configure_idx =35,
	wifi_cmd_tcpip_dns_gethostbyname_idx =36,
	wifi_cmd_tcpip_udp_bind_idx =37,
	wifi_cmd_tcpip_dhcp_set_hostname_idx =38,
	wifi_cmd_endpoint_send_idx =39,
	wifi_cmd_endpoint_set_streaming_idx =40,
	wifi_cmd_endpoint_set_active_idx =41,
	wifi_cmd_endpoint_set_streaming_destination_idx =42,
	wifi_cmd_endpoint_close_idx =43,
	wifi_cmd_endpoint_set_transmit_size_idx =44,
	wifi_cmd_endpoint_disable_idx =45,
	wifi_cmd_hardware_set_soft_timer_idx =46,
	wifi_cmd_hardware_external_interrupt_config_idx =47,
	wifi_cmd_hardware_change_notification_config_idx =48,
	wifi_cmd_hardware_change_notification_pullup_idx =49,
	wifi_cmd_hardware_io_port_config_direction_idx =50,
	wifi_cmd_hardware_io_port_config_open_drain_idx =51,
	wifi_cmd_hardware_io_port_write_idx =52,
	wifi_cmd_hardware_io_port_read_idx =53,
	wifi_cmd_hardware_output_compare_idx =54,
	wifi_cmd_hardware_adc_read_idx =55,
	wifi_cmd_hardware_rtc_init_idx =56,
	wifi_cmd_hardware_rtc_set_time_idx =57,
	wifi_cmd_hardware_rtc_get_time_idx =58,
	wifi_cmd_hardware_rtc_set_alarm_idx =59,
	wifi_cmd_hardware_uart_conf_idx =60,
	wifi_cmd_hardware_uart_conf_get_idx =61,
	wifi_cmd_flash_ps_defrag_idx =62,
	wifi_cmd_flash_ps_dump_idx =63,
	wifi_cmd_flash_ps_erase_all_idx =64,
	wifi_cmd_flash_ps_save_idx =65,
	wifi_cmd_flash_ps_load_idx =66,
	wifi_cmd_flash_ps_erase_idx =67,
	wifi_cmd_i2c_start_read_idx =68,
	wifi_cmd_i2c_start_write_idx =69,
	wifi_cmd_i2c_stop_idx =70,
	wifi_cmd_https_enable_idx =71,
	wifi_cmd_ethernet_set_dataroute_idx =72,
	wifi_cmd_ethernet_close_idx =73,
	wifi_cmd_ethernet_connected_idx =74,
	wifi_rsp_dfu_reset_idx =75,
	wifi_rsp_dfu_flash_set_address_idx =76,
	wifi_rsp_dfu_flash_upload_idx =77,
	wifi_rsp_dfu_flash_upload_finish_idx =78,
	wifi_rsp_system_sync_idx =79,
	wifi_rsp_system_reset_idx =80,
	wifi_rsp_system_hello_idx =81,
	wifi_rsp_system_set_max_power_saving_state_idx =82,
	wifi_rsp_config_get_mac_idx =83,
	wifi_rsp_config_set_mac_idx =84,
	wifi_rsp_sme_wifi_on_idx =85,
	wifi_rsp_sme_wifi_off_idx =86,
	wifi_rsp_sme_power_on_idx =87,
	wifi_rsp_sme_start_scan_idx =88,
	wifi_rsp_sme_stop_scan_idx =89,
	wifi_rsp_sme_set_password_idx =90,
	wifi_rsp_sme_connect_bssid_idx =91,
	wifi_rsp_sme_connect_ssid_idx =92,
	wifi_rsp_sme_disconnect_idx =93,
	wifi_rsp_sme_set_scan_channels_idx =94,
	wifi_rsp_sme_set_operating_mode_idx =95,
	wifi_rsp_sme_start_ap_mode_idx =96,
	wifi_rsp_sme_stop_ap_mode_idx =97,
	wifi_rsp_sme_scan_results_sort_rssi_idx =98,
	wifi_rsp_sme_ap_client_disconnect_idx =99,
	wifi_rsp_sme_set_ap_password_idx =100,
	wifi_rsp_sme_set_ap_max_clients_idx =101,
	wifi_rsp_sme_start_wps_idx =102,
	wifi_rsp_sme_stop_wps_idx =103,
	wifi_rsp_sme_get_signal_quality_idx =104,
	wifi_rsp_tcpip_start_tcp_server_idx =105,
	wifi_rsp_tcpip_tcp_connect_idx =106,
	wifi_rsp_tcpip_start_udp_server_idx =107,
	wifi_rsp_tcpip_udp_connect_idx =108,
	wifi_rsp_tcpip_configure_idx =109,
	wifi_rsp_tcpip_dns_configure_idx =110,
	wifi_rsp_tcpip_dns_gethostbyname_idx =111,
	wifi_rsp_tcpip_udp_bind_idx =112,
	wifi_rsp_tcpip_dhcp_set_hostname_idx =113,
	wifi_rsp_endpoint_send_idx =114,
	wifi_rsp_endpoint_set_streaming_idx =115,
	wifi_rsp_endpoint_set_active_idx =116,
	wifi_rsp_endpoint_set_streaming_destination_idx =117,
	wifi_rsp_endpoint_close_idx =118,
	wifi_rsp_endpoint_set_transmit_size_idx =119,
	wifi_rsp_endpoint_disable_idx =120,
	wifi_rsp_hardware_set_soft_timer_idx =121,
	wifi_rsp_hardware_external_interrupt_config_idx =122,
	wifi_rsp_hardware_change_notification_config_idx =123,
	wifi_rsp_hardware_change_notification_pullup_idx =124,
	wifi_rsp_hardware_io_port_config_direction_idx =125,
	wifi_rsp_hardware_io_port_config_open_drain_idx =126,
	wifi_rsp_hardware_io_port_write_idx =127,
	wifi_rsp_hardware_io_port_read_idx =128,
	wifi_rsp_hardware_output_compare_idx =129,
	wifi_rsp_hardware_adc_read_idx =130,
	wifi_rsp_hardware_rtc_init_idx =131,
	wifi_rsp_hardware_rtc_set_time_idx =132,
	wifi_rsp_hardware_rtc_get_time_idx =133,
	wifi_rsp_hardware_rtc_set_alarm_idx =134,
	wifi_rsp_hardware_uart_conf_idx =135,
	wifi_rsp_hardware_uart_conf_get_idx =136,
	wifi_rsp_flash_ps_defrag_idx =137,
	wifi_rsp_flash_ps_dump_idx =138,
	wifi_rsp_flash_ps_erase_all_idx =139,
	wifi_rsp_flash_ps_save_idx =140,
	wifi_rsp_flash_ps_load_idx =141,
	wifi_rsp_flash_ps_erase_idx =142,
	wifi_rsp_i2c_start_read_idx =143,
	wifi_rsp_i2c_start_write_idx =144,
	wifi_rsp_i2c_stop_idx =145,
	wifi_rsp_https_enable_idx =146,
	wifi_rsp_ethernet_set_dataroute_idx =147,
	wifi_rsp_ethernet_close_idx =148,
	wifi_rsp_ethernet_connected_idx =149,
	wifi_evt_dfu_boot_idx =150,
	wifi_evt_system_boot_idx =151,
	wifi_evt_system_state_idx =152,
	wifi_evt_system_sw_exception_idx =153,
	wifi_evt_system_power_saving_state_idx =154,
	wifi_evt_config_mac_address_idx =155,
	wifi_evt_sme_wifi_is_on_idx =156,
	wifi_evt_sme_wifi_is_off_idx =157,
	wifi_evt_sme_scan_result_idx =158,
	wifi_evt_sme_scan_result_drop_idx =159,
	wifi_evt_sme_scanned_idx =160,
	wifi_evt_sme_connected_idx =161,
	wifi_evt_sme_disconnected_idx =162,
	wifi_evt_sme_interface_status_idx =163,
	wifi_evt_sme_connect_failed_idx =164,
	wifi_evt_sme_connect_retry_idx =165,
	wifi_evt_sme_ap_mode_started_idx =166,
	wifi_evt_sme_ap_mode_stopped_idx =167,
	wifi_evt_sme_ap_mode_failed_idx =168,
	wifi_evt_sme_ap_client_joined_idx =169,
	wifi_evt_sme_ap_client_left_idx =170,
	wifi_evt_sme_scan_sort_result_idx =171,
	wifi_evt_sme_scan_sort_finished_idx =172,
	wifi_evt_sme_wps_stopped_idx =173,
	wifi_evt_sme_wps_completed_idx =174,
	wifi_evt_sme_wps_failed_idx =175,
	wifi_evt_sme_wps_credential_ssid_idx =176,
	wifi_evt_sme_wps_credential_password_idx =177,
	wifi_evt_sme_signal_quality_idx =178,
	wifi_evt_tcpip_configuration_idx =179,
	wifi_evt_tcpip_dns_configuration_idx =180,
	wifi_evt_tcpip_endpoint_status_idx =181,
	wifi_evt_tcpip_dns_gethostbyname_result_idx =182,
	wifi_evt_tcpip_udp_data_idx =183,
	wifi_evt_endpoint_syntax_error_idx =184,
	wifi_evt_endpoint_data_idx =185,
	wifi_evt_endpoint_status_idx =186,
	wifi_evt_endpoint_closing_idx =187,
	wifi_evt_endpoint_error_idx =188,
	wifi_evt_hardware_soft_timer_idx =189,
	wifi_evt_hardware_change_notification_idx =190,
	wifi_evt_hardware_external_interrupt_idx =191,
	wifi_evt_hardware_rtc_alarm_idx =192,
	wifi_evt_hardware_uart_conf_idx =193,
	wifi_evt_flash_ps_key_idx =194,
	wifi_evt_flash_ps_key_changed_idx =195,
	wifi_evt_flash_low_voltage_idx =196,
	wifi_evt_https_on_req_idx =197,
	wifi_evt_https_button_idx =198,
	wifi_evt_ethernet_link_status_idx =199
};
#ifndef BG_ERRORCODES
#define BG_ERRORCODES
enum wifi_error_spaces
{
	wifi_errspc_hardware=768,
	wifi_errspc_bg=256,
	wifi_errspc_tcpip=512,
};
typedef enum wifi_error
{
	wifi_err_hardware_ps_store_full            =wifi_errspc_hardware+1,//Flash reserved for PS store is full
	wifi_err_hardware_ps_key_not_found         =wifi_errspc_hardware+2,//PS key not found
	wifi_err_hardware_i2c_write_already_started=wifi_errspc_hardware+3,//Tried to start i2c write transmission, but it is already in progress.
	wifi_err_hardware_i2c_ack_missing          =wifi_errspc_hardware+4,//Acknowledge for i2c was not received.
	wifi_err_hardware_flash_failed             =wifi_errspc_hardware+8,//Writing to flash failed
	wifi_err_success                           =0,                     //No error
	wifi_err_invalid_param                     =wifi_errspc_bg+128,    //Command contained invalid parameter
	wifi_err_wrong_state                       =wifi_errspc_bg+129,    //Device is in wrong state to accept command
	wifi_err_out_of_memory                     =wifi_errspc_bg+130,    //Device has run out of memory
	wifi_err_not_implemented                   =wifi_errspc_bg+131,    //Feature is not implemented
	wifi_err_invalid_command                   =wifi_errspc_bg+132,    //Command was not recognized
	wifi_err_timeout                           =wifi_errspc_bg+133,    //Command or Procedure failed due to timeout
	wifi_err_unspecified                       =wifi_errspc_bg+134,    //Unspecified error
	wifi_err_hardware                          =wifi_errspc_bg+135,    //Hardware failure
	wifi_err_buffers_full                      =wifi_errspc_bg+136,    //Command not accepted, because internal buffers are full
	wifi_err_disconnected                      =wifi_errspc_bg+137,    //Command or Procedure failed due to disconnection
	wifi_err_too_many_requests                 =wifi_errspc_bg+138,    //Too many Simultaneous Requests
	wifi_err_ap_not_in_scanlist                =wifi_errspc_bg+139,    //Access Point not found from scanlist
	wifi_err_invalid_password                  =wifi_errspc_bg+140,    //Password is invalid or missing
	wifi_err_authentication_failure            =wifi_errspc_bg+141,    //WPA/WPA2 authentication has failed
	wifi_err_overflow                          =wifi_errspc_bg+142,    //Overflow detected
	wifi_err_multiple_pbc_sessions             =wifi_errspc_bg+143,    //Multiple PBC sessions detected
	wifi_err_eth_not_connected                 =wifi_errspc_bg+144,    //Ethernet cable not connected
	wifi_err_eth_route_not_set                 =wifi_errspc_bg+145,    //Ethernet route not set
	wifi_err_wrong_operating_mode              =wifi_errspc_bg+146,    //Wrong operating mode for this command
	wifi_err_tcpip_success                     =wifi_errspc_tcpip+0,   //No error
	wifi_err_tcpip_out_of_memory               =wifi_errspc_tcpip+1,   //Out of memory
	wifi_err_tcpip_buffer                      =wifi_errspc_tcpip+2,   //Buffer handling failed
	wifi_err_tcpip_timeout                     =wifi_errspc_tcpip+3,   //Timeout
	wifi_err_tcpip_routing                     =wifi_errspc_tcpip+4,   //Could not find route
	wifi_err_tcpip_in_progress                 =wifi_errspc_tcpip+5,   //Operation in progress
	wifi_err_tcpip_illegal_value               =wifi_errspc_tcpip+6,   //Illegal value
	wifi_err_tcpip_would_block                 =wifi_errspc_tcpip+7,   //Operation would block
	wifi_err_tcpip_in_use                      =wifi_errspc_tcpip+8,   //Address in use
	wifi_err_tcpip_already_connected           =wifi_errspc_tcpip+9,   //Already connected
	wifi_err_tcpip_abort                       =wifi_errspc_tcpip+10,  //Connection aborted
	wifi_err_tcpip_reset                       =wifi_errspc_tcpip+11,  //Connection reset
	wifi_err_tcpip_closed                      =wifi_errspc_tcpip+12,  //Connection closed
	wifi_err_tcpip_not_connected               =wifi_errspc_tcpip+13,  //Not connected
	wifi_err_tcpip_illegal_argument            =wifi_errspc_tcpip+14,  //Illegal argument
	wifi_err_tcpip_interface                   =wifi_errspc_tcpip+15,  //Interface error
	wifi_err_tcpip_unknown_host                =wifi_errspc_tcpip+128, //Unknown host
	wifi_err_last
}errorcode_t;
#endif
PACKSTRUCT(struct wifi_msg_dfu_reset_cmd_t
{
	uint8	dfu;
});

PACKSTRUCT(struct wifi_msg_dfu_flash_set_address_cmd_t
{
	uint32	address;
});

PACKSTRUCT(struct wifi_msg_dfu_flash_set_address_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_dfu_flash_upload_cmd_t
{
	uint8array	data;
});

PACKSTRUCT(struct wifi_msg_dfu_flash_upload_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_dfu_flash_upload_finish_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_dfu_boot_evt_t
{
	uint32	version;
});

PACKSTRUCT(struct wifi_msg_system_reset_cmd_t
{
	uint8	dfu;
});

PACKSTRUCT(struct wifi_msg_system_set_max_power_saving_state_cmd_t
{
	uint8	state;
});

PACKSTRUCT(struct wifi_msg_system_set_max_power_saving_state_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_system_boot_evt_t
{
	uint16	major;
	uint16	minor;
	uint16	patch;
	uint16	build;
	uint16	bootloader_version;
	uint16	tcpip_version;
	uint16	hw;
});

PACKSTRUCT(struct wifi_msg_system_state_evt_t
{
	uint16	state;
});

PACKSTRUCT(struct wifi_msg_system_sw_exception_evt_t
{
	uint32	address;
	uint8	type;
});

PACKSTRUCT(struct wifi_msg_system_power_saving_state_evt_t
{
	uint8	state;
});

PACKSTRUCT(struct wifi_msg_config_get_mac_cmd_t
{
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_config_get_mac_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_config_set_mac_cmd_t
{
	uint8	hw_interface;
	hw_addr	mac;
});

PACKSTRUCT(struct wifi_msg_config_set_mac_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_config_mac_address_evt_t
{
	uint8	hw_interface;
	hw_addr	mac;
});

PACKSTRUCT(struct wifi_msg_sme_wifi_on_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_wifi_off_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_power_on_cmd_t
{
	uint8	enable;
});

PACKSTRUCT(struct wifi_msg_sme_power_on_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_start_scan_cmd_t
{
	uint8	hw_interface;
	uint8array	chList;
});

PACKSTRUCT(struct wifi_msg_sme_start_scan_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_stop_scan_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_set_password_cmd_t
{
	uint8array	password;
});

PACKSTRUCT(struct wifi_msg_sme_set_password_rsp_t
{
	uint8	status;
});

PACKSTRUCT(struct wifi_msg_sme_connect_bssid_cmd_t
{
	hw_addr	bssid;
});

PACKSTRUCT(struct wifi_msg_sme_connect_bssid_rsp_t
{
	uint16	result;
	uint8	hw_interface;
	hw_addr	bssid;
});

PACKSTRUCT(struct wifi_msg_sme_connect_ssid_cmd_t
{
	uint8array	ssid;
});

PACKSTRUCT(struct wifi_msg_sme_connect_ssid_rsp_t
{
	uint16	result;
	uint8	hw_interface;
	hw_addr	bssid;
});

PACKSTRUCT(struct wifi_msg_sme_disconnect_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_set_scan_channels_cmd_t
{
	uint8	hw_interface;
	uint8array	chList;
});

PACKSTRUCT(struct wifi_msg_sme_set_scan_channels_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_set_operating_mode_cmd_t
{
	uint8	mode;
});

PACKSTRUCT(struct wifi_msg_sme_set_operating_mode_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_start_ap_mode_cmd_t
{
	uint8	channel;
	uint8	security;
	uint8array	ssid;
});

PACKSTRUCT(struct wifi_msg_sme_start_ap_mode_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_stop_ap_mode_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_scan_results_sort_rssi_cmd_t
{
	uint8	amount;
});

PACKSTRUCT(struct wifi_msg_sme_scan_results_sort_rssi_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_ap_client_disconnect_cmd_t
{
	hw_addr	mac_address;
});

PACKSTRUCT(struct wifi_msg_sme_ap_client_disconnect_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_set_ap_password_cmd_t
{
	uint8array	password;
});

PACKSTRUCT(struct wifi_msg_sme_set_ap_password_rsp_t
{
	uint8	status;
});

PACKSTRUCT(struct wifi_msg_sme_set_ap_max_clients_cmd_t
{
	uint8	max_clients;
});

PACKSTRUCT(struct wifi_msg_sme_set_ap_max_clients_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_start_wps_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_stop_wps_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_get_signal_quality_rsp_t
{
	uint16	result;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_wifi_is_on_evt_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_wifi_is_off_evt_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_sme_scan_result_evt_t
{
	hw_addr	bssid;
	int8	channel;
	int16	rssi;
	int8	snr;
	uint8	secure;
	uint8array	ssid;
});

PACKSTRUCT(struct wifi_msg_sme_scan_result_drop_evt_t
{
	hw_addr	bssid;
});

PACKSTRUCT(struct wifi_msg_sme_scanned_evt_t
{
	int8	status;
});

PACKSTRUCT(struct wifi_msg_sme_connected_evt_t
{
	int8	status;
	uint8	hw_interface;
	hw_addr	bssid;
});

PACKSTRUCT(struct wifi_msg_sme_disconnected_evt_t
{
	uint16	reason;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_interface_status_evt_t
{
	uint8	hw_interface;
	uint8	status;
});

PACKSTRUCT(struct wifi_msg_sme_connect_failed_evt_t
{
	uint16	reason;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_connect_retry_evt_t
{
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_ap_mode_started_evt_t
{
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_ap_mode_stopped_evt_t
{
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_ap_mode_failed_evt_t
{
	uint16	reason;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_ap_client_joined_evt_t
{
	hw_addr	mac_address;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_ap_client_left_evt_t
{
	hw_addr	mac_address;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_scan_sort_result_evt_t
{
	hw_addr	bssid;
	int8	channel;
	int16	rssi;
	int8	snr;
	uint8	secure;
	uint8array	ssid;
});

PACKSTRUCT(struct wifi_msg_sme_wps_stopped_evt_t
{
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_wps_completed_evt_t
{
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_wps_failed_evt_t
{
	uint16	reason;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_sme_wps_credential_ssid_evt_t
{
	uint8	hw_interface;
	uint8array	ssid;
});

PACKSTRUCT(struct wifi_msg_sme_wps_credential_password_evt_t
{
	uint8	hw_interface;
	uint8array	password;
});

PACKSTRUCT(struct wifi_msg_sme_signal_quality_evt_t
{
	int8	rssi;
	uint8	hw_interface;
});

PACKSTRUCT(struct wifi_msg_tcpip_start_tcp_server_cmd_t
{
	uint16	port;
	int8	default_destination;
});

PACKSTRUCT(struct wifi_msg_tcpip_start_tcp_server_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_tcpip_tcp_connect_cmd_t
{
	ipv4	address;
	uint16	port;
	int8	routing;
});

PACKSTRUCT(struct wifi_msg_tcpip_tcp_connect_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_tcpip_start_udp_server_cmd_t
{
	uint16	port;
	int8	default_destination;
});

PACKSTRUCT(struct wifi_msg_tcpip_start_udp_server_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_tcpip_udp_connect_cmd_t
{
	ipv4	address;
	uint16	port;
	int8	routing;
});

PACKSTRUCT(struct wifi_msg_tcpip_udp_connect_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_tcpip_configure_cmd_t
{
	ipv4	address;
	ipv4	netmask;
	ipv4	gateway;
	uint8	use_dhcp;
});

PACKSTRUCT(struct wifi_msg_tcpip_configure_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_tcpip_dns_configure_cmd_t
{
	uint8	index;
	ipv4	address;
});

PACKSTRUCT(struct wifi_msg_tcpip_dns_configure_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_tcpip_dns_gethostbyname_cmd_t
{
	uint8array	name;
});

PACKSTRUCT(struct wifi_msg_tcpip_dns_gethostbyname_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_tcpip_udp_bind_cmd_t
{
	uint8	endpoint;
	uint16	port;
});

PACKSTRUCT(struct wifi_msg_tcpip_udp_bind_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_tcpip_dhcp_set_hostname_cmd_t
{
	uint8array	hostname;
});

PACKSTRUCT(struct wifi_msg_tcpip_dhcp_set_hostname_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_tcpip_configuration_evt_t
{
	ipv4	address;
	ipv4	netmask;
	ipv4	gateway;
	uint8	use_dhcp;
});

PACKSTRUCT(struct wifi_msg_tcpip_dns_configuration_evt_t
{
	uint8	index;
	ipv4	address;
});

PACKSTRUCT(struct wifi_msg_tcpip_endpoint_status_evt_t
{
	uint8	endpoint;
	ipv4	local_ip;
	uint16	local_port;
	ipv4	remote_ip;
	uint16	remote_port;
});

PACKSTRUCT(struct wifi_msg_tcpip_dns_gethostbyname_result_evt_t
{
	uint16	result;
	ipv4	address;
	uint8array	name;
});

PACKSTRUCT(struct wifi_msg_tcpip_udp_data_evt_t
{
	uint8	endpoint;
	ipv4	source_address;
	uint16	source_port;
	uint16array	data;
});

PACKSTRUCT(struct wifi_msg_endpoint_send_cmd_t
{
	uint8	endpoint;
	uint8array	data;
});

PACKSTRUCT(struct wifi_msg_endpoint_send_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_streaming_cmd_t
{
	uint8	endpoint;
	uint8	streaming;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_streaming_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_active_cmd_t
{
	uint8	endpoint;
	uint8	active;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_active_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_streaming_destination_cmd_t
{
	uint8	endpoint;
	int8	streaming_destination;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_streaming_destination_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_close_cmd_t
{
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_close_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_transmit_size_cmd_t
{
	uint8	endpoint;
	uint16	size;
});

PACKSTRUCT(struct wifi_msg_endpoint_set_transmit_size_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_disable_cmd_t
{
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_disable_rsp_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_syntax_error_evt_t
{
	uint16	result;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_data_evt_t
{
	uint8	endpoint;
	uint8array	data;
});

PACKSTRUCT(struct wifi_msg_endpoint_status_evt_t
{
	uint8	endpoint;
	uint32	type;
	uint8	streaming;
	int8	destination;
	uint8	active;
});

PACKSTRUCT(struct wifi_msg_endpoint_closing_evt_t
{
	uint16	reason;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_endpoint_error_evt_t
{
	uint16	reason;
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_hardware_set_soft_timer_cmd_t
{
	uint32	time;
	uint8	handle;
	uint8	single_shot;
});

PACKSTRUCT(struct wifi_msg_hardware_set_soft_timer_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_external_interrupt_config_cmd_t
{
	uint8	enable;
	uint8	polarity;
});

PACKSTRUCT(struct wifi_msg_hardware_external_interrupt_config_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_change_notification_config_cmd_t
{
	uint32	enable;
});

PACKSTRUCT(struct wifi_msg_hardware_change_notification_config_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_change_notification_pullup_cmd_t
{
	uint32	pullup;
});

PACKSTRUCT(struct wifi_msg_hardware_change_notification_pullup_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_config_direction_cmd_t
{
	uint8	port;
	uint16	mask;
	uint16	direction;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_config_direction_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_config_open_drain_cmd_t
{
	uint8	port;
	uint16	mask;
	uint16	open_drain;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_config_open_drain_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_write_cmd_t
{
	uint8	port;
	uint16	mask;
	uint16	data;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_write_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_read_cmd_t
{
	uint8	port;
	uint16	mask;
});

PACKSTRUCT(struct wifi_msg_hardware_io_port_read_rsp_t
{
	uint16	result;
	uint8	port;
	uint16	data;
});

PACKSTRUCT(struct wifi_msg_hardware_output_compare_cmd_t
{
	uint8	index;
	uint8	bit32;
	uint8	timer;
	uint8	mode;
	uint32	compare_value;
});

PACKSTRUCT(struct wifi_msg_hardware_output_compare_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_adc_read_cmd_t
{
	uint8	input;
});

PACKSTRUCT(struct wifi_msg_hardware_adc_read_rsp_t
{
	uint16	result;
	uint8	input;
	uint16	value;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_init_cmd_t
{
	uint8	enable;
	int16	drift;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_init_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_set_time_cmd_t
{
	int16	year;
	int8	month;
	int8	day;
	int8	weekday;
	int8	hour;
	int8	minute;
	int8	second;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_set_time_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_get_time_rsp_t
{
	uint16	result;
	int16	year;
	int8	month;
	int8	day;
	int8	weekday;
	int8	hour;
	int8	minute;
	int8	second;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_set_alarm_cmd_t
{
	uint8	month;
	uint8	day;
	int8	weekday;
	uint8	hour;
	uint8	minute;
	uint8	second;
	uint8	repeat_mask;
	int16	repeat_count;
});

PACKSTRUCT(struct wifi_msg_hardware_rtc_set_alarm_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_uart_conf_cmd_t
{
	uint8	id;
	uint32	rate;
	uint8	data_bits;
	uint8	stop_bits;
	uint8	parity;
	uint8	flow_ctrl;
});

PACKSTRUCT(struct wifi_msg_hardware_uart_conf_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_uart_conf_get_cmd_t
{
	uint8	id;
});

PACKSTRUCT(struct wifi_msg_hardware_uart_conf_get_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_hardware_soft_timer_evt_t
{
	uint8	handle;
});

PACKSTRUCT(struct wifi_msg_hardware_change_notification_evt_t
{
	uint32	timestamp;
});

PACKSTRUCT(struct wifi_msg_hardware_external_interrupt_evt_t
{
	uint8	irq;
	uint32	timestamp;
});

PACKSTRUCT(struct wifi_msg_hardware_uart_conf_evt_t
{
	uint8	id;
	uint32	rate;
	uint8	data_bits;
	uint8	stop_bits;
	uint8	parity;
	uint8	flow_ctrl;
});

PACKSTRUCT(struct wifi_msg_flash_ps_defrag_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_flash_ps_dump_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_flash_ps_erase_all_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_flash_ps_save_cmd_t
{
	uint16	key;
	uint8array	value;
});

PACKSTRUCT(struct wifi_msg_flash_ps_save_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_flash_ps_load_cmd_t
{
	uint16	key;
});

PACKSTRUCT(struct wifi_msg_flash_ps_load_rsp_t
{
	uint16	result;
	uint8array	value;
});

PACKSTRUCT(struct wifi_msg_flash_ps_erase_cmd_t
{
	uint16	key;
});

PACKSTRUCT(struct wifi_msg_flash_ps_erase_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_flash_ps_key_evt_t
{
	uint16	key;
	uint8array	value;
});

PACKSTRUCT(struct wifi_msg_flash_ps_key_changed_evt_t
{
	uint16	key;
});

PACKSTRUCT(struct wifi_msg_i2c_start_read_cmd_t
{
	uint8	endpoint;
	uint16	slave_address;
	uint8	length;
});

PACKSTRUCT(struct wifi_msg_i2c_start_read_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_i2c_start_write_cmd_t
{
	uint8	endpoint;
	uint16	slave_address;
});

PACKSTRUCT(struct wifi_msg_i2c_start_write_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_i2c_stop_cmd_t
{
	uint8	endpoint;
});

PACKSTRUCT(struct wifi_msg_i2c_stop_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_https_enable_cmd_t
{
	uint8	https;
	uint8	dhcps;
	uint8	dnss;
});

PACKSTRUCT(struct wifi_msg_https_enable_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_https_on_req_evt_t
{
	uint8	service;
});

PACKSTRUCT(struct wifi_msg_https_button_evt_t
{
	uint8	number;
});

PACKSTRUCT(struct wifi_msg_ethernet_set_dataroute_cmd_t
{
	uint8	route;
});

PACKSTRUCT(struct wifi_msg_ethernet_set_dataroute_rsp_t
{
	uint16	result;
});

PACKSTRUCT(struct wifi_msg_ethernet_connected_rsp_t
{
	uint8	state;
});

PACKSTRUCT(struct wifi_msg_ethernet_link_status_evt_t
{
	uint8	state;
});

PACKSTRUCT(
struct wifi_cmd_packet
{
	struct wifi_header header;

union{
	uint8 handle;

	uint8 payload;

	struct wifi_msg_dfu_reset_cmd_t                           dfu_reset_cmd;
	struct wifi_msg_dfu_flash_set_address_cmd_t               dfu_flash_set_address_cmd;
	struct wifi_msg_dfu_flash_upload_cmd_t                    dfu_flash_upload_cmd;
	struct wifi_msg_dfu_boot_evt_t                            dfu_boot_evt;
	struct wifi_msg_dfu_flash_set_address_rsp_t               dfu_flash_set_address_rsp;
	struct wifi_msg_dfu_flash_upload_rsp_t                    dfu_flash_upload_rsp;
	struct wifi_msg_dfu_flash_upload_finish_rsp_t             dfu_flash_upload_finish_rsp;
	struct wifi_msg_system_reset_cmd_t                        system_reset_cmd;
	struct wifi_msg_system_set_max_power_saving_state_cmd_t   system_set_max_power_saving_state_cmd;
	struct wifi_msg_system_boot_evt_t                         system_boot_evt;
	struct wifi_msg_system_state_evt_t                        system_state_evt;
	struct wifi_msg_system_sw_exception_evt_t                 system_sw_exception_evt;
	struct wifi_msg_system_power_saving_state_evt_t           system_power_saving_state_evt;
	struct wifi_msg_system_set_max_power_saving_state_rsp_t   system_set_max_power_saving_state_rsp;
	struct wifi_msg_config_get_mac_cmd_t                      config_get_mac_cmd;
	struct wifi_msg_config_set_mac_cmd_t                      config_set_mac_cmd;
	struct wifi_msg_config_mac_address_evt_t                  config_mac_address_evt;
	struct wifi_msg_config_get_mac_rsp_t                      config_get_mac_rsp;
	struct wifi_msg_config_set_mac_rsp_t                      config_set_mac_rsp;
	struct wifi_msg_sme_power_on_cmd_t                        sme_power_on_cmd;
	struct wifi_msg_sme_start_scan_cmd_t                      sme_start_scan_cmd;
	struct wifi_msg_sme_set_password_cmd_t                    sme_set_password_cmd;
	struct wifi_msg_sme_connect_bssid_cmd_t                   sme_connect_bssid_cmd;
	struct wifi_msg_sme_connect_ssid_cmd_t                    sme_connect_ssid_cmd;
	struct wifi_msg_sme_set_scan_channels_cmd_t               sme_set_scan_channels_cmd;
	struct wifi_msg_sme_set_operating_mode_cmd_t              sme_set_operating_mode_cmd;
	struct wifi_msg_sme_start_ap_mode_cmd_t                   sme_start_ap_mode_cmd;
	struct wifi_msg_sme_scan_results_sort_rssi_cmd_t          sme_scan_results_sort_rssi_cmd;
	struct wifi_msg_sme_ap_client_disconnect_cmd_t            sme_ap_client_disconnect_cmd;
	struct wifi_msg_sme_set_ap_password_cmd_t                 sme_set_ap_password_cmd;
	struct wifi_msg_sme_set_ap_max_clients_cmd_t              sme_set_ap_max_clients_cmd;
	struct wifi_msg_sme_wifi_is_on_evt_t                      sme_wifi_is_on_evt;
	struct wifi_msg_sme_wifi_is_off_evt_t                     sme_wifi_is_off_evt;
	struct wifi_msg_sme_scan_result_evt_t                     sme_scan_result_evt;
	struct wifi_msg_sme_scan_result_drop_evt_t                sme_scan_result_drop_evt;
	struct wifi_msg_sme_scanned_evt_t                         sme_scanned_evt;
	struct wifi_msg_sme_connected_evt_t                       sme_connected_evt;
	struct wifi_msg_sme_disconnected_evt_t                    sme_disconnected_evt;
	struct wifi_msg_sme_interface_status_evt_t                sme_interface_status_evt;
	struct wifi_msg_sme_connect_failed_evt_t                  sme_connect_failed_evt;
	struct wifi_msg_sme_connect_retry_evt_t                   sme_connect_retry_evt;
	struct wifi_msg_sme_ap_mode_started_evt_t                 sme_ap_mode_started_evt;
	struct wifi_msg_sme_ap_mode_stopped_evt_t                 sme_ap_mode_stopped_evt;
	struct wifi_msg_sme_ap_mode_failed_evt_t                  sme_ap_mode_failed_evt;
	struct wifi_msg_sme_ap_client_joined_evt_t                sme_ap_client_joined_evt;
	struct wifi_msg_sme_ap_client_left_evt_t                  sme_ap_client_left_evt;
	struct wifi_msg_sme_scan_sort_result_evt_t                sme_scan_sort_result_evt;
	struct wifi_msg_sme_wps_stopped_evt_t                     sme_wps_stopped_evt;
	struct wifi_msg_sme_wps_completed_evt_t                   sme_wps_completed_evt;
	struct wifi_msg_sme_wps_failed_evt_t                      sme_wps_failed_evt;
	struct wifi_msg_sme_wps_credential_ssid_evt_t             sme_wps_credential_ssid_evt;
	struct wifi_msg_sme_wps_credential_password_evt_t         sme_wps_credential_password_evt;
	struct wifi_msg_sme_signal_quality_evt_t                  sme_signal_quality_evt;
	struct wifi_msg_sme_wifi_on_rsp_t                         sme_wifi_on_rsp;
	struct wifi_msg_sme_wifi_off_rsp_t                        sme_wifi_off_rsp;
	struct wifi_msg_sme_power_on_rsp_t                        sme_power_on_rsp;
	struct wifi_msg_sme_start_scan_rsp_t                      sme_start_scan_rsp;
	struct wifi_msg_sme_stop_scan_rsp_t                       sme_stop_scan_rsp;
	struct wifi_msg_sme_set_password_rsp_t                    sme_set_password_rsp;
	struct wifi_msg_sme_connect_bssid_rsp_t                   sme_connect_bssid_rsp;
	struct wifi_msg_sme_connect_ssid_rsp_t                    sme_connect_ssid_rsp;
	struct wifi_msg_sme_disconnect_rsp_t                      sme_disconnect_rsp;
	struct wifi_msg_sme_set_scan_channels_rsp_t               sme_set_scan_channels_rsp;
	struct wifi_msg_sme_set_operating_mode_rsp_t              sme_set_operating_mode_rsp;
	struct wifi_msg_sme_start_ap_mode_rsp_t                   sme_start_ap_mode_rsp;
	struct wifi_msg_sme_stop_ap_mode_rsp_t                    sme_stop_ap_mode_rsp;
	struct wifi_msg_sme_scan_results_sort_rssi_rsp_t          sme_scan_results_sort_rssi_rsp;
	struct wifi_msg_sme_ap_client_disconnect_rsp_t            sme_ap_client_disconnect_rsp;
	struct wifi_msg_sme_set_ap_password_rsp_t                 sme_set_ap_password_rsp;
	struct wifi_msg_sme_set_ap_max_clients_rsp_t              sme_set_ap_max_clients_rsp;
	struct wifi_msg_sme_start_wps_rsp_t                       sme_start_wps_rsp;
	struct wifi_msg_sme_stop_wps_rsp_t                        sme_stop_wps_rsp;
	struct wifi_msg_sme_get_signal_quality_rsp_t              sme_get_signal_quality_rsp;
	struct wifi_msg_tcpip_start_tcp_server_cmd_t              tcpip_start_tcp_server_cmd;
	struct wifi_msg_tcpip_tcp_connect_cmd_t                   tcpip_tcp_connect_cmd;
	struct wifi_msg_tcpip_start_udp_server_cmd_t              tcpip_start_udp_server_cmd;
	struct wifi_msg_tcpip_udp_connect_cmd_t                   tcpip_udp_connect_cmd;
	struct wifi_msg_tcpip_configure_cmd_t                     tcpip_configure_cmd;
	struct wifi_msg_tcpip_dns_configure_cmd_t                 tcpip_dns_configure_cmd;
	struct wifi_msg_tcpip_dns_gethostbyname_cmd_t             tcpip_dns_gethostbyname_cmd;
	struct wifi_msg_tcpip_udp_bind_cmd_t                      tcpip_udp_bind_cmd;
	struct wifi_msg_tcpip_dhcp_set_hostname_cmd_t             tcpip_dhcp_set_hostname_cmd;
	struct wifi_msg_tcpip_configuration_evt_t                 tcpip_configuration_evt;
	struct wifi_msg_tcpip_dns_configuration_evt_t             tcpip_dns_configuration_evt;
	struct wifi_msg_tcpip_endpoint_status_evt_t               tcpip_endpoint_status_evt;
	struct wifi_msg_tcpip_dns_gethostbyname_result_evt_t      tcpip_dns_gethostbyname_result_evt;
	struct wifi_msg_tcpip_udp_data_evt_t                      tcpip_udp_data_evt;
	struct wifi_msg_tcpip_start_tcp_server_rsp_t              tcpip_start_tcp_server_rsp;
	struct wifi_msg_tcpip_tcp_connect_rsp_t                   tcpip_tcp_connect_rsp;
	struct wifi_msg_tcpip_start_udp_server_rsp_t              tcpip_start_udp_server_rsp;
	struct wifi_msg_tcpip_udp_connect_rsp_t                   tcpip_udp_connect_rsp;
	struct wifi_msg_tcpip_configure_rsp_t                     tcpip_configure_rsp;
	struct wifi_msg_tcpip_dns_configure_rsp_t                 tcpip_dns_configure_rsp;
	struct wifi_msg_tcpip_dns_gethostbyname_rsp_t             tcpip_dns_gethostbyname_rsp;
	struct wifi_msg_tcpip_udp_bind_rsp_t                      tcpip_udp_bind_rsp;
	struct wifi_msg_tcpip_dhcp_set_hostname_rsp_t             tcpip_dhcp_set_hostname_rsp;
	struct wifi_msg_endpoint_send_cmd_t                       endpoint_send_cmd;
	struct wifi_msg_endpoint_set_streaming_cmd_t              endpoint_set_streaming_cmd;
	struct wifi_msg_endpoint_set_active_cmd_t                 endpoint_set_active_cmd;
	struct wifi_msg_endpoint_set_streaming_destination_cmd_t  endpoint_set_streaming_destination_cmd;
	struct wifi_msg_endpoint_close_cmd_t                      endpoint_close_cmd;
	struct wifi_msg_endpoint_set_transmit_size_cmd_t          endpoint_set_transmit_size_cmd;
	struct wifi_msg_endpoint_disable_cmd_t                    endpoint_disable_cmd;
	struct wifi_msg_endpoint_syntax_error_evt_t               endpoint_syntax_error_evt;
	struct wifi_msg_endpoint_data_evt_t                       endpoint_data_evt;
	struct wifi_msg_endpoint_status_evt_t                     endpoint_status_evt;
	struct wifi_msg_endpoint_closing_evt_t                    endpoint_closing_evt;
	struct wifi_msg_endpoint_error_evt_t                      endpoint_error_evt;
	struct wifi_msg_endpoint_send_rsp_t                       endpoint_send_rsp;
	struct wifi_msg_endpoint_set_streaming_rsp_t              endpoint_set_streaming_rsp;
	struct wifi_msg_endpoint_set_active_rsp_t                 endpoint_set_active_rsp;
	struct wifi_msg_endpoint_set_streaming_destination_rsp_t  endpoint_set_streaming_destination_rsp;
	struct wifi_msg_endpoint_close_rsp_t                      endpoint_close_rsp;
	struct wifi_msg_endpoint_set_transmit_size_rsp_t          endpoint_set_transmit_size_rsp;
	struct wifi_msg_endpoint_disable_rsp_t                    endpoint_disable_rsp;
	struct wifi_msg_hardware_set_soft_timer_cmd_t             hardware_set_soft_timer_cmd;
	struct wifi_msg_hardware_external_interrupt_config_cmd_t  hardware_external_interrupt_config_cmd;
	struct wifi_msg_hardware_change_notification_config_cmd_t hardware_change_notification_config_cmd;
	struct wifi_msg_hardware_change_notification_pullup_cmd_t hardware_change_notification_pullup_cmd;
	struct wifi_msg_hardware_io_port_config_direction_cmd_t   hardware_io_port_config_direction_cmd;
	struct wifi_msg_hardware_io_port_config_open_drain_cmd_t  hardware_io_port_config_open_drain_cmd;
	struct wifi_msg_hardware_io_port_write_cmd_t              hardware_io_port_write_cmd;
	struct wifi_msg_hardware_io_port_read_cmd_t               hardware_io_port_read_cmd;
	struct wifi_msg_hardware_output_compare_cmd_t             hardware_output_compare_cmd;
	struct wifi_msg_hardware_adc_read_cmd_t                   hardware_adc_read_cmd;
	struct wifi_msg_hardware_rtc_init_cmd_t                   hardware_rtc_init_cmd;
	struct wifi_msg_hardware_rtc_set_time_cmd_t               hardware_rtc_set_time_cmd;
	struct wifi_msg_hardware_rtc_set_alarm_cmd_t              hardware_rtc_set_alarm_cmd;
	struct wifi_msg_hardware_uart_conf_cmd_t                  hardware_uart_conf_cmd;
	struct wifi_msg_hardware_uart_conf_get_cmd_t              hardware_uart_conf_get_cmd;
	struct wifi_msg_hardware_soft_timer_evt_t                 hardware_soft_timer_evt;
	struct wifi_msg_hardware_change_notification_evt_t        hardware_change_notification_evt;
	struct wifi_msg_hardware_external_interrupt_evt_t         hardware_external_interrupt_evt;
	struct wifi_msg_hardware_uart_conf_evt_t                  hardware_uart_conf_evt;
	struct wifi_msg_hardware_set_soft_timer_rsp_t             hardware_set_soft_timer_rsp;
	struct wifi_msg_hardware_external_interrupt_config_rsp_t  hardware_external_interrupt_config_rsp;
	struct wifi_msg_hardware_change_notification_config_rsp_t hardware_change_notification_config_rsp;
	struct wifi_msg_hardware_change_notification_pullup_rsp_t hardware_change_notification_pullup_rsp;
	struct wifi_msg_hardware_io_port_config_direction_rsp_t   hardware_io_port_config_direction_rsp;
	struct wifi_msg_hardware_io_port_config_open_drain_rsp_t  hardware_io_port_config_open_drain_rsp;
	struct wifi_msg_hardware_io_port_write_rsp_t              hardware_io_port_write_rsp;
	struct wifi_msg_hardware_io_port_read_rsp_t               hardware_io_port_read_rsp;
	struct wifi_msg_hardware_output_compare_rsp_t             hardware_output_compare_rsp;
	struct wifi_msg_hardware_adc_read_rsp_t                   hardware_adc_read_rsp;
	struct wifi_msg_hardware_rtc_init_rsp_t                   hardware_rtc_init_rsp;
	struct wifi_msg_hardware_rtc_set_time_rsp_t               hardware_rtc_set_time_rsp;
	struct wifi_msg_hardware_rtc_get_time_rsp_t               hardware_rtc_get_time_rsp;
	struct wifi_msg_hardware_rtc_set_alarm_rsp_t              hardware_rtc_set_alarm_rsp;
	struct wifi_msg_hardware_uart_conf_rsp_t                  hardware_uart_conf_rsp;
	struct wifi_msg_hardware_uart_conf_get_rsp_t              hardware_uart_conf_get_rsp;
	struct wifi_msg_flash_ps_save_cmd_t                       flash_ps_save_cmd;
	struct wifi_msg_flash_ps_load_cmd_t                       flash_ps_load_cmd;
	struct wifi_msg_flash_ps_erase_cmd_t                      flash_ps_erase_cmd;
	struct wifi_msg_flash_ps_key_evt_t                        flash_ps_key_evt;
	struct wifi_msg_flash_ps_key_changed_evt_t                flash_ps_key_changed_evt;
	struct wifi_msg_flash_ps_defrag_rsp_t                     flash_ps_defrag_rsp;
	struct wifi_msg_flash_ps_dump_rsp_t                       flash_ps_dump_rsp;
	struct wifi_msg_flash_ps_erase_all_rsp_t                  flash_ps_erase_all_rsp;
	struct wifi_msg_flash_ps_save_rsp_t                       flash_ps_save_rsp;
	struct wifi_msg_flash_ps_load_rsp_t                       flash_ps_load_rsp;
	struct wifi_msg_flash_ps_erase_rsp_t                      flash_ps_erase_rsp;
	struct wifi_msg_i2c_start_read_cmd_t                      i2c_start_read_cmd;
	struct wifi_msg_i2c_start_write_cmd_t                     i2c_start_write_cmd;
	struct wifi_msg_i2c_stop_cmd_t                            i2c_stop_cmd;
	struct wifi_msg_i2c_start_read_rsp_t                      i2c_start_read_rsp;
	struct wifi_msg_i2c_start_write_rsp_t                     i2c_start_write_rsp;
	struct wifi_msg_i2c_stop_rsp_t                            i2c_stop_rsp;
	struct wifi_msg_https_enable_cmd_t                        https_enable_cmd;
	struct wifi_msg_https_on_req_evt_t                        https_on_req_evt;
	struct wifi_msg_https_button_evt_t                        https_button_evt;
	struct wifi_msg_https_enable_rsp_t                        https_enable_rsp;
	struct wifi_msg_ethernet_set_dataroute_cmd_t              ethernet_set_dataroute_cmd;
	struct wifi_msg_ethernet_link_status_evt_t                ethernet_link_status_evt;
	struct wifi_msg_ethernet_set_dataroute_rsp_t              ethernet_set_dataroute_rsp;
	struct wifi_msg_ethernet_connected_rsp_t                  ethernet_connected_rsp;
};

}ALIGNED);
/**Reset system**/
#define wifi_cmd_dfu_reset(dfu) wifi_send_message (wifi_cmd_dfu_reset_idx,dfu)
/**This command set address on the flash memory for writing data.**/
#define wifi_cmd_dfu_flash_set_address(address) wifi_send_message (wifi_cmd_dfu_flash_set_address_idx,address)
/**Upload binary for flashing. Address will be updated automatically.**/
#define wifi_cmd_dfu_flash_upload(data_len,data_data) wifi_send_message (wifi_cmd_dfu_flash_upload_idx,data_len,data_data)
/**Uploading is finished.**/
#define wifi_cmd_dfu_flash_upload_finish() wifi_send_message (wifi_cmd_dfu_flash_upload_finish_idx)
/**Sync system state**/
#define wifi_cmd_system_sync() wifi_send_message (wifi_cmd_system_sync_idx)
/**Reset system**/
#define wifi_cmd_system_reset(dfu) wifi_send_message (wifi_cmd_system_reset_idx,dfu)
/**Hello (no-op)**/
#define wifi_cmd_system_hello() wifi_send_message (wifi_cmd_system_hello_idx)
/**set maximum state for power saving**/
#define wifi_cmd_system_set_max_power_saving_state(state) wifi_send_message (wifi_cmd_system_set_max_power_saving_state_idx,state)
/**Get MAC address**/
#define wifi_cmd_config_get_mac(hw_interface) wifi_send_message (wifi_cmd_config_get_mac_idx,hw_interface)
/**Set MAC address**/
#define wifi_cmd_config_set_mac(hw_interface,mac) wifi_send_message (wifi_cmd_config_set_mac_idx,hw_interface,mac)
/**Turn Wi-Fi on**/
#define wifi_cmd_sme_wifi_on() wifi_send_message (wifi_cmd_sme_wifi_on_idx)
/**Turn wifi off**/
#define wifi_cmd_sme_wifi_off() wifi_send_message (wifi_cmd_sme_wifi_off_idx)
/**Turn on or off the power to the Wi-Fi chip**/
#define wifi_cmd_sme_power_on(enable) wifi_send_message (wifi_cmd_sme_power_on_idx,enable)
/**Initiate the scan procedure**/
#define wifi_cmd_sme_start_scan(hw_interface,chList_len,chList_data) wifi_send_message (wifi_cmd_sme_start_scan_idx,hw_interface,chList_len,chList_data)
/**Terminate the scan procedure**/
#define wifi_cmd_sme_stop_scan() wifi_send_message (wifi_cmd_sme_stop_scan_idx)
/**Set the Wi-Fi password**/
#define wifi_cmd_sme_set_password(password_len,password_data) wifi_send_message (wifi_cmd_sme_set_password_idx,password_len,password_data)
/**Connect to a specific Access Point using its unique BSSID**/
#define wifi_cmd_sme_connect_bssid(bssid) wifi_send_message (wifi_cmd_sme_connect_bssid_idx,bssid)
/**Connect to an Access Point which belongs to the network identified with the given SSID**/
#define wifi_cmd_sme_connect_ssid(ssid_len,ssid_data) wifi_send_message (wifi_cmd_sme_connect_ssid_idx,ssid_len,ssid_data)
/**Disconnect from the Access Point**/
#define wifi_cmd_sme_disconnect() wifi_send_message (wifi_cmd_sme_disconnect_idx)
/**Set default scan channel list**/
#define wifi_cmd_sme_set_scan_channels(hw_interface,chList_len,chList_data) wifi_send_message (wifi_cmd_sme_set_scan_channels_idx,hw_interface,chList_len,chList_data)
/**Set Wi-Fi operating mode**/
#define wifi_cmd_sme_set_operating_mode(mode) wifi_send_message (wifi_cmd_sme_set_operating_mode_idx,mode)
/**Start Access Point mode**/
#define wifi_cmd_sme_start_ap_mode(channel,security,ssid_len,ssid_data) wifi_send_message (wifi_cmd_sme_start_ap_mode_idx,channel,security,ssid_len,ssid_data)
/**Stop Access Point mode**/
#define wifi_cmd_sme_stop_ap_mode() wifi_send_message (wifi_cmd_sme_stop_ap_mode_idx)
/**resend scan results, sorted by rssi**/
#define wifi_cmd_sme_scan_results_sort_rssi(amount) wifi_send_message (wifi_cmd_sme_scan_results_sort_rssi_idx,amount)
/**Disconnect a station from the network.**/
#define wifi_cmd_sme_ap_client_disconnect(mac_address) wifi_send_message (wifi_cmd_sme_ap_client_disconnect_idx,mac_address)
/**Set the Wi-Fi password for Access Point**/
#define wifi_cmd_sme_set_ap_password(password_len,password_data) wifi_send_message (wifi_cmd_sme_set_ap_password_idx,password_len,password_data)
/**Set the maximum amount of stations that can be associated to the Access Point at the same time.**/
#define wifi_cmd_sme_set_ap_max_clients(max_clients) wifi_send_message (wifi_cmd_sme_set_ap_max_clients_idx,max_clients)
/**Start Wi-Fi Protected Setup session**/
#define wifi_cmd_sme_start_wps() wifi_send_message (wifi_cmd_sme_start_wps_idx)
/**Stop Wi-Fi Protected Setup session**/
#define wifi_cmd_sme_stop_wps() wifi_send_message (wifi_cmd_sme_stop_wps_idx)
/**Get connection signal quality**/
#define wifi_cmd_sme_get_signal_quality() wifi_send_message (wifi_cmd_sme_get_signal_quality_idx)
/**Start TCP server**/
#define wifi_cmd_tcpip_start_tcp_server(port,default_destination) wifi_send_message (wifi_cmd_tcpip_start_tcp_server_idx,port,default_destination)
/**Attempt to create a new TCP connection**/
#define wifi_cmd_tcpip_tcp_connect(address,port,routing) wifi_send_message (wifi_cmd_tcpip_tcp_connect_idx,address,port,routing)
/**Create a new UDP Server**/
#define wifi_cmd_tcpip_start_udp_server(port,default_destination) wifi_send_message (wifi_cmd_tcpip_start_udp_server_idx,port,default_destination)
/**Create a new UDP connection**/
#define wifi_cmd_tcpip_udp_connect(address,port,routing) wifi_send_message (wifi_cmd_tcpip_udp_connect_idx,address,port,routing)
/**Configure TCP/IP**/
#define wifi_cmd_tcpip_configure(address,netmask,gateway,use_dhcp) wifi_send_message (wifi_cmd_tcpip_configure_idx,address,netmask,gateway,use_dhcp)
/**Configure DNS**/
#define wifi_cmd_tcpip_dns_configure(index,address) wifi_send_message (wifi_cmd_tcpip_dns_configure_idx,index,address)
/**Start resolving a hostname into an IP address using the configured DNS server**/
#define wifi_cmd_tcpip_dns_gethostbyname(name_len,name_data) wifi_send_message (wifi_cmd_tcpip_dns_gethostbyname_idx,name_len,name_data)
/**Bind existing UDP connection to specific source port**/
#define wifi_cmd_tcpip_udp_bind(endpoint,port) wifi_send_message (wifi_cmd_tcpip_udp_bind_idx,endpoint,port)
/**Set DHCP hostname parameter**/
#define wifi_cmd_tcpip_dhcp_set_hostname(hostname_len,hostname_data) wifi_send_message (wifi_cmd_tcpip_dhcp_set_hostname_idx,hostname_len,hostname_data)
/**Send data to a given endpoint**/
#define wifi_cmd_endpoint_send(endpoint,data_len,data_data) wifi_send_message (wifi_cmd_endpoint_send_idx,endpoint,data_len,data_data)
/**set streaming mode**/
#define wifi_cmd_endpoint_set_streaming(endpoint,streaming) wifi_send_message (wifi_cmd_endpoint_set_streaming_idx,endpoint,streaming)
/**set active status**/
#define wifi_cmd_endpoint_set_active(endpoint,active) wifi_send_message (wifi_cmd_endpoint_set_active_idx,endpoint,active)
/**set destination for streaming mode**/
#define wifi_cmd_endpoint_set_streaming_destination(endpoint,streaming_destination) wifi_send_message (wifi_cmd_endpoint_set_streaming_destination_idx,endpoint,streaming_destination)
/**Close the endpoint**/
#define wifi_cmd_endpoint_close(endpoint) wifi_send_message (wifi_cmd_endpoint_close_idx,endpoint)
/**Set transmit packet size. **/
#define wifi_cmd_endpoint_set_transmit_size(endpoint,size) wifi_send_message (wifi_cmd_endpoint_set_transmit_size_idx,endpoint,size)
/**Disable endpoint**/
#define wifi_cmd_endpoint_disable(endpoint) wifi_send_message (wifi_cmd_endpoint_disable_idx,endpoint)
/**Set soft timer to send events**/
#define wifi_cmd_hardware_set_soft_timer(time,handle,single_shot) wifi_send_message (wifi_cmd_hardware_set_soft_timer_idx,time,handle,single_shot)
/**Configure external interrupt**/
#define wifi_cmd_hardware_external_interrupt_config(enable,polarity) wifi_send_message (wifi_cmd_hardware_external_interrupt_config_idx,enable,polarity)
/**Configure change notification**/
#define wifi_cmd_hardware_change_notification_config(enable) wifi_send_message (wifi_cmd_hardware_change_notification_config_idx,enable)
/**Configure change notification pull-up**/
#define wifi_cmd_hardware_change_notification_pullup(pullup) wifi_send_message (wifi_cmd_hardware_change_notification_pullup_idx,pullup)
/**Configure I/O-port direction**/
#define wifi_cmd_hardware_io_port_config_direction(port,mask,direction) wifi_send_message (wifi_cmd_hardware_io_port_config_direction_idx,port,mask,direction)
/**Configure I/O-port open drain**/
#define wifi_cmd_hardware_io_port_config_open_drain(port,mask,open_drain) wifi_send_message (wifi_cmd_hardware_io_port_config_open_drain_idx,port,mask,open_drain)
/**Set the pins of an I/O-port**/
#define wifi_cmd_hardware_io_port_write(port,mask,data) wifi_send_message (wifi_cmd_hardware_io_port_write_idx,port,mask,data)
/**Read the pins of an I/O-port**/
#define wifi_cmd_hardware_io_port_read(port,mask) wifi_send_message (wifi_cmd_hardware_io_port_read_idx,port,mask)
/**Set output compare settings**/
#define wifi_cmd_hardware_output_compare(index,bit32,timer,mode,compare_value) wifi_send_message (wifi_cmd_hardware_output_compare_idx,index,bit32,timer,mode,compare_value)
/**Read devices A/D converter**/
#define wifi_cmd_hardware_adc_read(input) wifi_send_message (wifi_cmd_hardware_adc_read_idx,input)
/**Init Real Time Clock**/
#define wifi_cmd_hardware_rtc_init(enable,drift) wifi_send_message (wifi_cmd_hardware_rtc_init_idx,enable,drift)
/**Set Real Time Clock time**/
#define wifi_cmd_hardware_rtc_set_time(year,month,day,weekday,hour,minute,second) wifi_send_message (wifi_cmd_hardware_rtc_set_time_idx,year,month,day,weekday,hour,minute,second)
/**Get Real Time Clock time**/
#define wifi_cmd_hardware_rtc_get_time() wifi_send_message (wifi_cmd_hardware_rtc_get_time_idx)
/**Set Real Time Clock alarm**/
#define wifi_cmd_hardware_rtc_set_alarm(month,day,weekday,hour,minute,second,repeat_mask,repeat_count) wifi_send_message (wifi_cmd_hardware_rtc_set_alarm_idx,month,day,weekday,hour,minute,second,repeat_mask,repeat_count)
/**Configure UART**/
#define wifi_cmd_hardware_uart_conf(id,rate,data_bits,stop_bits,parity,flow_ctrl) wifi_send_message (wifi_cmd_hardware_uart_conf_idx,id,rate,data_bits,stop_bits,parity,flow_ctrl)
/**Get uart configuration**/
#define wifi_cmd_hardware_uart_conf_get(id) wifi_send_message (wifi_cmd_hardware_uart_conf_get_idx,id)
/**Defragment persistent store**/
#define wifi_cmd_flash_ps_defrag() wifi_send_message (wifi_cmd_flash_ps_defrag_idx)
/**Dump all ps keys**/
#define wifi_cmd_flash_ps_dump() wifi_send_message (wifi_cmd_flash_ps_dump_idx)
/**Erase all ps keys. Warning: This will erase the device's MAC address!**/
#define wifi_cmd_flash_ps_erase_all() wifi_send_message (wifi_cmd_flash_ps_erase_all_idx)
/**Store a value to the given key in the persistent store**/
#define wifi_cmd_flash_ps_save(key,value_len,value_data) wifi_send_message (wifi_cmd_flash_ps_save_idx,key,value_len,value_data)
/**Retrieve the value from the persistent store for the given key **/
#define wifi_cmd_flash_ps_load(key) wifi_send_message (wifi_cmd_flash_ps_load_idx,key)
/**Erase the key and value from the persisten store.**/
#define wifi_cmd_flash_ps_erase(key) wifi_send_message (wifi_cmd_flash_ps_erase_idx,key)
/**Start I2C transmission for reading**/
#define wifi_cmd_i2c_start_read(endpoint,slave_address,length) wifi_send_message (wifi_cmd_i2c_start_read_idx,endpoint,slave_address,length)
/**Start I2C transmission for writing**/
#define wifi_cmd_i2c_start_write(endpoint,slave_address) wifi_send_message (wifi_cmd_i2c_start_write_idx,endpoint,slave_address)
/**Stop I2C transmission for writing**/
#define wifi_cmd_i2c_stop(endpoint) wifi_send_message (wifi_cmd_i2c_stop_idx,endpoint)
/**Enable/disable http, dhcp and dns server**/
#define wifi_cmd_https_enable(https,dhcps,dnss) wifi_send_message (wifi_cmd_https_enable_idx,https,dhcps,dnss)
/**Set wired Ethernet data route**/
#define wifi_cmd_ethernet_set_dataroute(route) wifi_send_message (wifi_cmd_ethernet_set_dataroute_idx,route)
/**Close wired Ethernet connection**/
#define wifi_cmd_ethernet_close() wifi_send_message (wifi_cmd_ethernet_close_idx)
/**Test wired Ethernet cable connection**/
#define wifi_cmd_ethernet_connected() wifi_send_message (wifi_cmd_ethernet_connected_idx)
/**Reset system**/
void wifi_rsp_dfu_reset(const void *nul);

/**This command set address on the flash memory for writing data.**/
void wifi_rsp_dfu_flash_set_address(const struct wifi_msg_dfu_flash_set_address_rsp_t *msg);

/**Upload binary for flashing. Address will be updated automatically.**/
void wifi_rsp_dfu_flash_upload(const struct wifi_msg_dfu_flash_upload_rsp_t *msg);

/**Uploading is finished.**/
void wifi_rsp_dfu_flash_upload_finish(const struct wifi_msg_dfu_flash_upload_finish_rsp_t *msg);

/**Sync system state**/
void wifi_rsp_system_sync(const void *nul);

/**Reset system**/
void wifi_rsp_system_reset(const void *nul);

/**Hello (no-op)**/
void wifi_rsp_system_hello(const void *nul);

/**set maximum state for power saving**/
void wifi_rsp_system_set_max_power_saving_state(const struct wifi_msg_system_set_max_power_saving_state_rsp_t *msg);

/**Get MAC address**/
void wifi_rsp_config_get_mac(const struct wifi_msg_config_get_mac_rsp_t *msg);

/**Set MAC address**/
void wifi_rsp_config_set_mac(const struct wifi_msg_config_set_mac_rsp_t *msg);

/**Turn Wi-Fi on**/
void wifi_rsp_sme_wifi_on(const struct wifi_msg_sme_wifi_on_rsp_t *msg);

/**Turn wifi off**/
void wifi_rsp_sme_wifi_off(const struct wifi_msg_sme_wifi_off_rsp_t *msg);

/**Turn on or off the power to the Wi-Fi chip**/
void wifi_rsp_sme_power_on(const struct wifi_msg_sme_power_on_rsp_t *msg);

/**Initiate the scan procedure**/
void wifi_rsp_sme_start_scan(const struct wifi_msg_sme_start_scan_rsp_t *msg);

/**Terminate the scan procedure**/
void wifi_rsp_sme_stop_scan(const struct wifi_msg_sme_stop_scan_rsp_t *msg);

/**Set the Wi-Fi password**/
void wifi_rsp_sme_set_password(const struct wifi_msg_sme_set_password_rsp_t *msg);

/**Connect to a specific Access Point using its unique BSSID**/
void wifi_rsp_sme_connect_bssid(const struct wifi_msg_sme_connect_bssid_rsp_t *msg);

/**Connect to an Access Point which belongs to the network identified with the given SSID**/
void wifi_rsp_sme_connect_ssid(const struct wifi_msg_sme_connect_ssid_rsp_t *msg);

/**Disconnect from the Access Point**/
void wifi_rsp_sme_disconnect(const struct wifi_msg_sme_disconnect_rsp_t *msg);

/**Set default scan channel list**/
void wifi_rsp_sme_set_scan_channels(const struct wifi_msg_sme_set_scan_channels_rsp_t *msg);

/**Set Wi-Fi operating mode**/
void wifi_rsp_sme_set_operating_mode(const struct wifi_msg_sme_set_operating_mode_rsp_t *msg);

/**Start Access Point mode**/
void wifi_rsp_sme_start_ap_mode(const struct wifi_msg_sme_start_ap_mode_rsp_t *msg);

/**Stop Access Point mode**/
void wifi_rsp_sme_stop_ap_mode(const struct wifi_msg_sme_stop_ap_mode_rsp_t *msg);

/**resend scan results, sorted by rssi**/
void wifi_rsp_sme_scan_results_sort_rssi(const struct wifi_msg_sme_scan_results_sort_rssi_rsp_t *msg);

/**Disconnect a station from the network.**/
void wifi_rsp_sme_ap_client_disconnect(const struct wifi_msg_sme_ap_client_disconnect_rsp_t *msg);

/**Set the Wi-Fi password for Access Point**/
void wifi_rsp_sme_set_ap_password(const struct wifi_msg_sme_set_ap_password_rsp_t *msg);

/**Set the maximum amount of stations that can be associated to the Access Point at the same time.**/
void wifi_rsp_sme_set_ap_max_clients(const struct wifi_msg_sme_set_ap_max_clients_rsp_t *msg);

/**Start Wi-Fi Protected Setup session**/
void wifi_rsp_sme_start_wps(const struct wifi_msg_sme_start_wps_rsp_t *msg);

/**Stop Wi-Fi Protected Setup session**/
void wifi_rsp_sme_stop_wps(const struct wifi_msg_sme_stop_wps_rsp_t *msg);

/**Get connection signal quality**/
void wifi_rsp_sme_get_signal_quality(const struct wifi_msg_sme_get_signal_quality_rsp_t *msg);

/**Start TCP server**/
void wifi_rsp_tcpip_start_tcp_server(const struct wifi_msg_tcpip_start_tcp_server_rsp_t *msg);

/**Attempt to create a new TCP connection**/
void wifi_rsp_tcpip_tcp_connect(const struct wifi_msg_tcpip_tcp_connect_rsp_t *msg);

/**Create a new UDP Server**/
void wifi_rsp_tcpip_start_udp_server(const struct wifi_msg_tcpip_start_udp_server_rsp_t *msg);

/**Create a new UDP connection**/
void wifi_rsp_tcpip_udp_connect(const struct wifi_msg_tcpip_udp_connect_rsp_t *msg);

/**Configure TCP/IP**/
void wifi_rsp_tcpip_configure(const struct wifi_msg_tcpip_configure_rsp_t *msg);

/**Configure DNS**/
void wifi_rsp_tcpip_dns_configure(const struct wifi_msg_tcpip_dns_configure_rsp_t *msg);

/**Start resolving a hostname into an IP address using the configured DNS server**/
void wifi_rsp_tcpip_dns_gethostbyname(const struct wifi_msg_tcpip_dns_gethostbyname_rsp_t *msg);

/**Bind existing UDP connection to specific source port**/
void wifi_rsp_tcpip_udp_bind(const struct wifi_msg_tcpip_udp_bind_rsp_t *msg);

/**Set DHCP hostname parameter**/
void wifi_rsp_tcpip_dhcp_set_hostname(const struct wifi_msg_tcpip_dhcp_set_hostname_rsp_t *msg);

/**Send data to a given endpoint**/
void wifi_rsp_endpoint_send(const struct wifi_msg_endpoint_send_rsp_t *msg);

/**set streaming mode**/
void wifi_rsp_endpoint_set_streaming(const struct wifi_msg_endpoint_set_streaming_rsp_t *msg);

/**set active status**/
void wifi_rsp_endpoint_set_active(const struct wifi_msg_endpoint_set_active_rsp_t *msg);

/**set destination for streaming mode**/
void wifi_rsp_endpoint_set_streaming_destination(const struct wifi_msg_endpoint_set_streaming_destination_rsp_t *msg);

/**Close the endpoint**/
void wifi_rsp_endpoint_close(const struct wifi_msg_endpoint_close_rsp_t *msg);

/**Set transmit packet size. **/
void wifi_rsp_endpoint_set_transmit_size(const struct wifi_msg_endpoint_set_transmit_size_rsp_t *msg);

/**Disable endpoint**/
void wifi_rsp_endpoint_disable(const struct wifi_msg_endpoint_disable_rsp_t *msg);

/**Set soft timer to send events**/
void wifi_rsp_hardware_set_soft_timer(const struct wifi_msg_hardware_set_soft_timer_rsp_t *msg);

/**Configure external interrupt**/
void wifi_rsp_hardware_external_interrupt_config(const struct wifi_msg_hardware_external_interrupt_config_rsp_t *msg);

/**Configure change notification**/
void wifi_rsp_hardware_change_notification_config(const struct wifi_msg_hardware_change_notification_config_rsp_t *msg);

/**Configure change notification pull-up**/
void wifi_rsp_hardware_change_notification_pullup(const struct wifi_msg_hardware_change_notification_pullup_rsp_t *msg);

/**Configure I/O-port direction**/
void wifi_rsp_hardware_io_port_config_direction(const struct wifi_msg_hardware_io_port_config_direction_rsp_t *msg);

/**Configure I/O-port open drain**/
void wifi_rsp_hardware_io_port_config_open_drain(const struct wifi_msg_hardware_io_port_config_open_drain_rsp_t *msg);

/**Set the pins of an I/O-port**/
void wifi_rsp_hardware_io_port_write(const struct wifi_msg_hardware_io_port_write_rsp_t *msg);

/**Read the pins of an I/O-port**/
void wifi_rsp_hardware_io_port_read(const struct wifi_msg_hardware_io_port_read_rsp_t *msg);

/**Set output compare settings**/
void wifi_rsp_hardware_output_compare(const struct wifi_msg_hardware_output_compare_rsp_t *msg);

/**Read devices A/D converter**/
void wifi_rsp_hardware_adc_read(const struct wifi_msg_hardware_adc_read_rsp_t *msg);

/**Init Real Time Clock**/
void wifi_rsp_hardware_rtc_init(const struct wifi_msg_hardware_rtc_init_rsp_t *msg);

/**Set Real Time Clock time**/
void wifi_rsp_hardware_rtc_set_time(const struct wifi_msg_hardware_rtc_set_time_rsp_t *msg);

/**Get Real Time Clock time**/
void wifi_rsp_hardware_rtc_get_time(const struct wifi_msg_hardware_rtc_get_time_rsp_t *msg);

/**Set Real Time Clock alarm**/
void wifi_rsp_hardware_rtc_set_alarm(const struct wifi_msg_hardware_rtc_set_alarm_rsp_t *msg);

/**Configure UART**/
void wifi_rsp_hardware_uart_conf(const struct wifi_msg_hardware_uart_conf_rsp_t *msg);

/**Get uart configuration**/
void wifi_rsp_hardware_uart_conf_get(const struct wifi_msg_hardware_uart_conf_get_rsp_t *msg);

/**Defragment persistent store**/
void wifi_rsp_flash_ps_defrag(const struct wifi_msg_flash_ps_defrag_rsp_t *msg);

/**Dump all ps keys**/
void wifi_rsp_flash_ps_dump(const struct wifi_msg_flash_ps_dump_rsp_t *msg);

/**Erase all ps keys. Warning: This will erase the device's MAC address!**/
void wifi_rsp_flash_ps_erase_all(const struct wifi_msg_flash_ps_erase_all_rsp_t *msg);

/**Store a value to the given key in the persistent store**/
void wifi_rsp_flash_ps_save(const struct wifi_msg_flash_ps_save_rsp_t *msg);

/**Retrieve the value from the persistent store for the given key **/
void wifi_rsp_flash_ps_load(const struct wifi_msg_flash_ps_load_rsp_t *msg);

/**Erase the key and value from the persisten store.**/
void wifi_rsp_flash_ps_erase(const struct wifi_msg_flash_ps_erase_rsp_t *msg);

/**Start I2C transmission for reading**/
void wifi_rsp_i2c_start_read(const struct wifi_msg_i2c_start_read_rsp_t *msg);

/**Start I2C transmission for writing**/
void wifi_rsp_i2c_start_write(const struct wifi_msg_i2c_start_write_rsp_t *msg);

/**Stop I2C transmission for writing**/
void wifi_rsp_i2c_stop(const struct wifi_msg_i2c_stop_rsp_t *msg);

/**Enable/disable http, dhcp and dns server**/
void wifi_rsp_https_enable(const struct wifi_msg_https_enable_rsp_t *msg);

/**Set wired Ethernet data route**/
void wifi_rsp_ethernet_set_dataroute(const struct wifi_msg_ethernet_set_dataroute_rsp_t *msg);

/**Close wired Ethernet connection**/
void wifi_rsp_ethernet_close(const void *nul);

/**Test wired Ethernet cable connection**/
void wifi_rsp_ethernet_connected(const struct wifi_msg_ethernet_connected_rsp_t *msg);

/**This event indicates that the module booted in DFU mode, and is ready to receive commands related to DFU re-flash.**/
void wifi_evt_dfu_boot(const struct wifi_msg_dfu_boot_evt_t *msg);

/**Device booted up, and is ready to receive commands**/
void wifi_evt_system_boot(const struct wifi_msg_system_boot_evt_t *msg);

/**Current state of system**/
void wifi_evt_system_state(const struct wifi_msg_system_state_evt_t *msg);

/**Software exception occurred last time**/
void wifi_evt_system_sw_exception(const struct wifi_msg_system_sw_exception_evt_t *msg);

/**Current power saving state of cpu**/
void wifi_evt_system_power_saving_state(const struct wifi_msg_system_power_saving_state_evt_t *msg);

/**The current MAC address**/
void wifi_evt_config_mac_address(const struct wifi_msg_config_mac_address_evt_t *msg);

/**WiFi is on**/
void wifi_evt_sme_wifi_is_on(const struct wifi_msg_sme_wifi_is_on_evt_t *msg);

/**WiFi is off**/
void wifi_evt_sme_wifi_is_off(const struct wifi_msg_sme_wifi_is_off_evt_t *msg);

/**scan result**/
void wifi_evt_sme_scan_result(const struct wifi_msg_sme_scan_result_evt_t *msg);

/**Indicates that the Access Point was dropped from the modules BSSID filtering list.**/
void wifi_evt_sme_scan_result_drop(const struct wifi_msg_sme_scan_result_drop_evt_t *msg);

/**scanned status**/
void wifi_evt_sme_scanned(const struct wifi_msg_sme_scanned_evt_t *msg);

/**Connected to Access point**/
void wifi_evt_sme_connected(const struct wifi_msg_sme_connected_evt_t *msg);

/**Disconnected from the Access Point**/
void wifi_evt_sme_disconnected(const struct wifi_msg_sme_disconnected_evt_t *msg);

/**Network interface status**/
void wifi_evt_sme_interface_status(const struct wifi_msg_sme_interface_status_evt_t *msg);

/**Connect failed**/
void wifi_evt_sme_connect_failed(const struct wifi_msg_sme_connect_failed_evt_t *msg);

/**Connect retry**/
void wifi_evt_sme_connect_retry(const struct wifi_msg_sme_connect_retry_evt_t *msg);

/**Access Point mode has been successfully started**/
void wifi_evt_sme_ap_mode_started(const struct wifi_msg_sme_ap_mode_started_evt_t *msg);

/**Access Point mode has been stopped**/
void wifi_evt_sme_ap_mode_stopped(const struct wifi_msg_sme_ap_mode_stopped_evt_t *msg);

/**Access Point mode has failed**/
void wifi_evt_sme_ap_mode_failed(const struct wifi_msg_sme_ap_mode_failed_evt_t *msg);

/**A station has joined the BSS**/
void wifi_evt_sme_ap_client_joined(const struct wifi_msg_sme_ap_client_joined_evt_t *msg);

/**A station has left the BSS**/
void wifi_evt_sme_ap_client_left(const struct wifi_msg_sme_ap_client_left_evt_t *msg);

/**scan result**/
void wifi_evt_sme_scan_sort_result(const struct wifi_msg_sme_scan_sort_result_evt_t *msg);

/**scan result sort finished**/
void wifi_evt_sme_scan_sort_finished(const void *nul);

/**Wi-Fi Protected Setup session was stopped.**/
void wifi_evt_sme_wps_stopped(const struct wifi_msg_sme_wps_stopped_evt_t *msg);

/**Wi-Fi Protected Setup session was completed successfully.**/
void wifi_evt_sme_wps_completed(const struct wifi_msg_sme_wps_completed_evt_t *msg);

/**Wi-Fi Protected Setup session failed.**/
void wifi_evt_sme_wps_failed(const struct wifi_msg_sme_wps_failed_evt_t *msg);

/**Wi-Fi Protected Setup SSID credential.**/
void wifi_evt_sme_wps_credential_ssid(const struct wifi_msg_sme_wps_credential_ssid_evt_t *msg);

/**Wi-Fi Protected Setup password credential.**/
void wifi_evt_sme_wps_credential_password(const struct wifi_msg_sme_wps_credential_password_evt_t *msg);

/**Connection signal quality**/
void wifi_evt_sme_signal_quality(const struct wifi_msg_sme_signal_quality_evt_t *msg);

/**TCP/IP configuration status**/
void wifi_evt_tcpip_configuration(const struct wifi_msg_tcpip_configuration_evt_t *msg);

/**DNS configuration status**/
void wifi_evt_tcpip_dns_configuration(const struct wifi_msg_tcpip_dns_configuration_evt_t *msg);

/**Describes the current status of a tcp/ip endpoint**/
void wifi_evt_tcpip_endpoint_status(const struct wifi_msg_tcpip_endpoint_status_evt_t *msg);

/**The event generated in response to a gethostbyname command. If the procedure was successful, this message contains the IP address of the queried address.**/
void wifi_evt_tcpip_dns_gethostbyname_result(const struct wifi_msg_tcpip_dns_gethostbyname_result_evt_t *msg);

/**Incoming data from an udp endpoint**/
void wifi_evt_tcpip_udp_data(const struct wifi_msg_tcpip_udp_data_evt_t *msg);

/**Syntax error**/
void wifi_evt_endpoint_syntax_error(const struct wifi_msg_endpoint_syntax_error_evt_t *msg);

/**Incoming data from an endpoint**/
void wifi_evt_endpoint_data(const struct wifi_msg_endpoint_data_evt_t *msg);

/**status**/
void wifi_evt_endpoint_status(const struct wifi_msg_endpoint_status_evt_t *msg);

/**Endpoint is closing**/
void wifi_evt_endpoint_closing(const struct wifi_msg_endpoint_closing_evt_t *msg);

/**Error in endpoint**/
void wifi_evt_endpoint_error(const struct wifi_msg_endpoint_error_evt_t *msg);

/**Soft timer event indicating a timer has lapsed**/
void wifi_evt_hardware_soft_timer(const struct wifi_msg_hardware_soft_timer_evt_t *msg);

/**Change notification**/
void wifi_evt_hardware_change_notification(const struct wifi_msg_hardware_change_notification_evt_t *msg);

/**External Interrupt**/
void wifi_evt_hardware_external_interrupt(const struct wifi_msg_hardware_external_interrupt_evt_t *msg);

/**RTC Alarm**/
void wifi_evt_hardware_rtc_alarm(const void *nul);

/**UART configuration**/
void wifi_evt_hardware_uart_conf(const struct wifi_msg_hardware_uart_conf_evt_t *msg);

/**Dump key result**/
void wifi_evt_flash_ps_key(const struct wifi_msg_flash_ps_key_evt_t *msg);

/**Persistent Key has been changed**/
void wifi_evt_flash_ps_key_changed(const struct wifi_msg_flash_ps_key_changed_evt_t *msg);

/**Low voltage detected during flash operation. Flash writing is not possible.**/
void wifi_evt_flash_low_voltage(const void *nul);

/**Request to set module service on**/
void wifi_evt_https_on_req(const struct wifi_msg_https_on_req_evt_t *msg);

/**Button clicked**/
void wifi_evt_https_button(const struct wifi_msg_https_button_evt_t *msg);

/**Wired Ethernet link state changed**/
void wifi_evt_ethernet_link_status(const struct wifi_msg_ethernet_link_status_evt_t *msg);



struct wifi_class_handler_t
{
    const struct wifi_msg * const *msgs;
    uint8 maxhandlers;
};
extern struct wifi_class_handler_t wifi_class_rsp_handlers[wifi_cls_last];
extern struct wifi_class_handler_t wifi_class_evt_handlers[wifi_cls_last];            
 
void wifi_default(const void*); 
#ifdef __cplusplus
}
#endif
                 
#endif
